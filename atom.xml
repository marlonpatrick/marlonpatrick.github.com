<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Marlon Patrick]]></title>
  <subtitle><![CDATA[Dicas de um programador]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://marlonpatrick.info//"/>
  <updated>2015-08-02T12:59:57.661Z</updated>
  <id>http://marlonpatrick.info//</id>
  
  <author>
    <name><![CDATA[Marlon Patrick]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://marlonpatrick.info/undefined/2015/08/03/hello-world/"/>
    <id>http://marlonpatrick.info/undefined/2015/08/03/hello-world/</id>
    <published>2015-08-03T03:49:01.690Z</published>
    <updated>2015-08-02T12:59:57.661Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JBOSS: Log de SQL de maneira simples com jdbcdslog]]></title>
    <link href="http://marlonpatrick.info/pt-br/2014/12/14/jboss-log-de-sql-de-maneira-simples-com-jdbcdslog/"/>
    <id>http://marlonpatrick.info/pt-br/2014/12/14/jboss-log-de-sql-de-maneira-simples-com-jdbcdslog/</id>
    <published>2014-12-14T20:36:00.000Z</published>
    <updated>2015-08-03T01:26:20.442Z</updated>
    <content type="html"><![CDATA[<p>Uma necessidade básica em quase todos os projetos de software é o log de instruções SQL e para esse fim existe uma infinidade de opções. No entanto, apesar das várias alternativas, muitas vezes o log não é feito da melhor forma:</p>
<a id="more"></a>
<ul>
<li>Excesso de log: são logadas coisas demais (consultas, abertura e fechamento de conexões, abertura e fechamento de resultsets) e o programador não tem a possibilidade de configurar o que deve ou não ser logado.</li>
<li>Falta de integração com frameworks de logging: a lib atende bem a os requisitos de Log de SQL, porém, não se integra com frameworks de log (log4j, java logging, apache commons logging) o que acaba obrigando o desenvolvedor a criar um arquivo de log específico para SQL.</li>
<li>Dificuldades para se trabalhar com DataSources, em especial, XA-DataSources: a ferramenta de log atende bem os dois requisitos acima, porém, é limitada a ser usada com objetos java.sql.Connection, ou em outros casos, podem ser usados com DataSources “normais”, porém, não atendem quando precisamos logar sql de XA-DataSources.</li>
</ul>
<p>Para quem usa o Hibernate a primeira escolha normalmente é configurá-lo para logar as queries geradas, o resultado é algo como:</p>
<pre><code><span class="operator">select this_.code <span class="keyword">from</span> employee this_ <span class="keyword">where</span> this_.code=?
<span class="keyword">INSERT</span> <span class="keyword">INTO</span> stock_transaction (<span class="keyword">CHANGE</span>, <span class="keyword">CLOSE</span>, <span class="built_in">DATE</span>, <span class="keyword">OPEN</span>, STOCK_ID, VOLUME) <span class="keyword">VALUES</span> (?, ?, ?, ?, ?, ?)</span>
</code></pre><p>Nesse caso temos dois problemas, o primeiro é que os valores dos filtros e colunas não são logados, é mostrado apenas o caracter <strong>?</strong> indicando que foi substituído por um parâmetro. O outro problema é que nem sempre as consultas são realizadas pelo Hibernate, nesses casos, o log não seria mostrado nem mesmo o log sem parâmetros.</p>
<p>Pois bem, depois de testar algumas libs de log de sql encontrei uma que me atendeu em todos esses aspectos: controle do que será logado, integração com os frameworks de log mais populares, funcionar com Connection, DataSource e XA-Datasource, logar o sql com todos os seus parâmetros de modo que eu possa copiar e colar numa ferramenta de acesso a banco e executar o script, e por fim, logar qualquer sql que se faça através da conexão monitorada seja feita pelo Hibernate ou por qualquer outro modo. O nome da lib é <a href="https://code.google.com/p/jdbcdslog/" title="jdbcdslog" target="_blank">jdbcdslog</a>.</p>
<p>O exemplo mais básico é logar as queries de um simples objeto Connection:</p>
<pre><code>public static void main<span class="params">(String[] args)</span> throws Exception {
    Class.forName<span class="params">(<span class="string">"org.jdbcdslog.DriverLoggingProxy"</span>)</span>;

    String url = <span class="string">"jdbc:jdbcdslog:postgresql://172.16.1.6:5432/mpinfo;targetDriver=org.postgresql.Driver"</span>;
    Connection con = DriverManager.getConnection<span class="params">(url, <span class="string">"mpinfo"</span>, <span class="string">"mpinfo"</span>)</span>;

    PreparedStatement ps = con.prepareStatement<span class="params">(<span class="string">"select * from product where id=?"</span>)</span>;
    ps.setLong<span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span>;
    ps.execute<span class="params">()</span>;

    con.close<span class="params">()</span>;
}
</code></pre><p>Nesse exemplo estou acessando um banco PostgreSQL e perceba que a URL fica um pouco diferente do padrão pois preciso acrescentar o driver do Jdbcdslog como proxy para o driver original do Postgre. Você pode perceber isso em <strong>jdbc:jdbcdslog:postgresql</strong> e também no parâmetro <strong>targetDriver</strong>. O resultado desse código é algo como:</p>
<pre><code>[main] INFO org.jdbcdslog.StatementLogger - <span class="operator">select * <span class="keyword">from</span> ceos.product <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span>
</code></pre><p>Mas o que quero demonstrar mesmo aqui nesse post é como usar essa lib para logar sql de datasources no JBoss, aqui no meu ambiente vou usar o JBoss EAP 6.2, mas acredito que a partir da versão do JBoss 7 não muda quase nada. Para isso vamos criar módulos no JBoss com o driver do Postgre e também do jdbcdslog.</p>
<p>1 - Primeiro devemos criar a pasta JBOSS_HOME/modules/system/layers/base/org/postgresql/main/. Dentro dessa pasta colocaremos o jar do Postgre de acordo com a versão que você usa, por exemplo, postgresql-9.3-1101-jdbc41.jar. Além disso devemos criar um arquivo chamado module.xml com o seguinte conteúdo:</p>
<pre><code><span class="tag">&lt;<span class="title">module</span> <span class="attribute">xmlns</span>=<span class="value">"urn:jboss:module:1.1"</span> <span class="attribute">name</span>=<span class="value">"org.postgresql"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">resources</span>&gt;</span>
        <span class="tag">&lt;<span class="title">resource-root</span> <span class="attribute">path</span>=<span class="value">"postgresql-9.3-1101-jdbc41.jar"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">resources</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"javax.api"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"javax.transaction.api"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="title">module</span>&gt;</span>
</code></pre><p>Esse procedimento deverá ser feito para qualquer banco de dados que você queira logar as queries, seja Postgre, Oracle, MySQL etc. A lógica é a mesma, basta prestar atenção nos nomes dos arquivos e na pasta o qual serão colocados. A sugestão é utilizar o nome do pacote principal do jar, no caso do Postgre é o org.postgresql.</p>
<p>2 - Agora é a vez de criamos o módulo do jdbcdslog. Para isso criamos a pasta JBOSS_HOME/modules/system/layers/base/com/googlecode/usc/jdbcdslog/main/. Nessa pasta iremos colocar o jar do jdbcdslog, por exemplo, jdbcdslog-1.0.6.2.jar. Também precisaremos criar um arquivo chamado module.xml com o seguinte conteúdo:</p>
<pre><code><span class="tag">&lt;<span class="title">module</span> <span class="attribute">xmlns</span>=<span class="value">"urn:jboss:module:1.1"</span> <span class="attribute">name</span>=<span class="value">"com.googlecode.usc.jdbcdslog"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">resources</span>&gt;</span>
        <span class="tag">&lt;<span class="title">resource-root</span> <span class="attribute">path</span>=<span class="value">"jdbcdslog-1.0.6.2.jar"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">resources</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"org.slf4j"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"javax.api"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"javax.transaction.api"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"org.postgresql"</span> <span class="attribute">optional</span>=<span class="value">"true"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="title">module</span>&gt;</span>
</code></pre><p>Perceba que a dependência do módulo do Postgre é opcional. Será necessário incluir os módulos de outros bancos de dados (Oracle, Mysql) como dependência do módulo do jdbcdslog caso você queira fazer o log deles também.</p>
<p>3 - Agora abra o arquivo JBOSS_HOME/standalone/configuration/standalone.xml e configure os logs do jdbcdslog. Procure a tag do subsistema de log, algo como <code>&lt;subsystem xmlns=&quot;urn:jboss:domain:logging:1.3&quot;&gt;</code>, dentro dessa tag coloque o seguinte conteúdo:</p>
<pre><code><span class="tag">&lt;<span class="title">logger</span> <span class="attribute">category</span>=<span class="value">"org.jdbcdslog.StatementLogger"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">level</span> <span class="attribute">name</span>=<span class="value">"DEBUG"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">logger</span>&gt;</span>
<span class="tag">&lt;<span class="title">logger</span> <span class="attribute">category</span>=<span class="value">"org.jdbcdslog.ConnectionLogger"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">level</span> <span class="attribute">name</span>=<span class="value">"OFF"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">logger</span>&gt;</span>
<span class="tag">&lt;<span class="title">logger</span> <span class="attribute">category</span>=<span class="value">"org.jdbcdslog.ResultSetLogger"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">level</span> <span class="attribute">name</span>=<span class="value">"OFF"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">logger</span>&gt;</span>
<span class="tag">&lt;<span class="title">logger</span> <span class="attribute">category</span>=<span class="value">"org.jdbcdslog.SlowQueryLogger"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">level</span> <span class="attribute">name</span>=<span class="value">"OFF"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">logger</span>&gt;</span>
</code></pre><p>Das várias opções de log disponíveis, a única que deixamos ativa foi o log de statements, ou seja, log de comandos DML e DDL.</p>
<p>OBS:Caso seu JBoss esteja executando em modo domínio ao invés de standalone então essa configuração pode ser feita no arquivo JBOSS_HOME/domain/configuration/domain.xml</p>
<p>4 - Ainda no arquivo standalone.xml vamos criar o datasource. Abaixo seguem dois exemplos, um para um datasource normal e outro para um XA-DataSoure, ambos devem ficar dentro da tag <code>&lt;datasources&gt;</code>:</p>
<pre><code><span class="tag">&lt;<span class="title">datasource</span> <span class="attribute">jta</span>=<span class="value">"true"</span> <span class="attribute">jndi-name</span>=<span class="value">"java:/mpinfods"</span> <span class="attribute">pool-name</span>=<span class="value">"MPINFO-POOL"</span> <span class="attribute">enabled</span>=<span class="value">"true"</span> <span class="attribute">use-ccm</span>=<span class="value">"true"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">connection-url</span>&gt;</span>jdbc:jdbcdslog:postgresql://172.16.1.6:5432/mpinfo;targetDriver=org.postgresql.Driver<span class="tag">&lt;/<span class="title">connection-url</span>&gt;</span>
    <span class="tag">&lt;<span class="title">driver</span>&gt;</span>jdbcdslog<span class="tag">&lt;/<span class="title">driver</span>&gt;</span>
    <span class="tag">&lt;<span class="title">new-connection-sql</span>&gt;</span>select 1<span class="tag">&lt;/<span class="title">new-connection-sql</span>&gt;</span>
    <span class="tag">&lt;<span class="title">transaction-isolation</span>&gt;</span>TRANSACTION_READ_COMMITTED<span class="tag">&lt;/<span class="title">transaction-isolation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">pool</span>&gt;</span>
    <span class="tag">&lt;<span class="title">min-pool-size</span>&gt;</span>10<span class="tag">&lt;/<span class="title">min-pool-size</span>&gt;</span>
    <span class="tag">&lt;<span class="title">max-pool-size</span>&gt;</span>20<span class="tag">&lt;/<span class="title">max-pool-size</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">pool</span>&gt;</span>
    <span class="tag">&lt;<span class="title">security</span>&gt;</span>
    <span class="tag">&lt;<span class="title">user-name</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">user-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">password</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">password</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">security</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validate-on-match</span>&gt;</span>false<span class="tag">&lt;/<span class="title">validate-on-match</span>&gt;</span>
    <span class="tag">&lt;<span class="title">background-validation</span>&gt;</span>false<span class="tag">&lt;/<span class="title">background-validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">background-validation-millis</span>&gt;</span>1<span class="tag">&lt;/<span class="title">background-validation-millis</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">statement</span>&gt;</span>
    <span class="tag">&lt;<span class="title">prepared-statement-cache-size</span>&gt;</span>32<span class="tag">&lt;/<span class="title">prepared-statement-cache-size</span>&gt;</span>
    <span class="tag">&lt;<span class="title">share-prepared-statements</span>&gt;</span>false<span class="tag">&lt;/<span class="title">share-prepared-statements</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">statement</span>&gt;</span>
<span class="tag">&lt;/<span class="title">datasource</span>&gt;</span>

<span class="tag">&lt;<span class="title">xa-datasource</span> <span class="attribute">jndi-name</span>=<span class="value">"java:/mpinfoxads"</span> <span class="attribute">pool-name</span>=<span class="value">"MPINFO-XA-POOL"</span> <span class="attribute">enabled</span>=<span class="value">"true"</span> <span class="attribute">use-ccm</span>=<span class="value">"true"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-datasource-property</span> <span class="attribute">name</span>=<span class="value">"PortNumber"</span>&gt;</span>5432<span class="tag">&lt;/<span class="title">xa-datasource-property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-datasource-property</span> <span class="attribute">name</span>=<span class="value">"DatabaseName"</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">xa-datasource-property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-datasource-property</span> <span class="attribute">name</span>=<span class="value">"ServerName"</span>&gt;</span>172.16.1.6<span class="tag">&lt;/<span class="title">xa-datasource-property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-datasource-property</span> <span class="attribute">name</span>=<span class="value">"targetDS"</span>&gt;</span>org.postgresql.xa.PGXADataSource<span class="tag">&lt;/<span class="title">xa-datasource-property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">driver</span>&gt;</span>jdbcdslog<span class="tag">&lt;/<span class="title">driver</span>&gt;</span>
    <span class="tag">&lt;<span class="title">new-connection-sql</span>&gt;</span>select 1<span class="tag">&lt;/<span class="title">new-connection-sql</span>&gt;</span>
    <span class="tag">&lt;<span class="title">transaction-isolation</span>&gt;</span>TRANSACTION_READ_COMMITTED<span class="tag">&lt;/<span class="title">transaction-isolation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-pool</span>&gt;</span>
        <span class="tag">&lt;<span class="title">min-pool-size</span>&gt;</span>0<span class="tag">&lt;/<span class="title">min-pool-size</span>&gt;</span>
        <span class="tag">&lt;<span class="title">max-pool-size</span>&gt;</span>10<span class="tag">&lt;/<span class="title">max-pool-size</span>&gt;</span>
        <span class="tag">&lt;<span class="title">flush-strategy</span>&gt;</span>IdleConnections<span class="tag">&lt;/<span class="title">flush-strategy</span>&gt;</span>
        <span class="tag">&lt;<span class="title">is-same-rm-override</span>&gt;</span>false<span class="tag">&lt;/<span class="title">is-same-rm-override</span>&gt;</span>
        <span class="tag">&lt;<span class="title">interleaving</span>&gt;</span>false<span class="tag">&lt;/<span class="title">interleaving</span>&gt;</span>
        <span class="tag">&lt;<span class="title">pad-xid</span>&gt;</span>false<span class="tag">&lt;/<span class="title">pad-xid</span>&gt;</span>
        <span class="tag">&lt;<span class="title">wrap-xa-resource</span>&gt;</span>false<span class="tag">&lt;/<span class="title">wrap-xa-resource</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">xa-pool</span>&gt;</span>
    <span class="tag">&lt;<span class="title">security</span>&gt;</span>
        <span class="tag">&lt;<span class="title">user-name</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">user-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">password</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">password</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">security</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validation</span>&gt;</span>
        <span class="tag">&lt;<span class="title">valid-connection-checker</span> <span class="attribute">class-name</span>=<span class="value">"org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">validate-on-match</span>&gt;</span>true<span class="tag">&lt;/<span class="title">validate-on-match</span>&gt;</span>
        <span class="tag">&lt;<span class="title">background-validation</span>&gt;</span>false<span class="tag">&lt;/<span class="title">background-validation</span>&gt;</span>
        <span class="tag">&lt;<span class="title">exception-sorter</span> <span class="attribute">class-name</span>=<span class="value">"org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">timeout</span>&gt;</span>
        <span class="tag">&lt;<span class="title">idle-timeout-minutes</span>&gt;</span>3<span class="tag">&lt;/<span class="title">idle-timeout-minutes</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">timeout</span>&gt;</span>
    <span class="tag">&lt;<span class="title">statement</span>&gt;</span>
        <span class="tag">&lt;<span class="title">track-statements</span>&gt;</span>true<span class="tag">&lt;/<span class="title">track-statements</span>&gt;</span>
        <span class="tag">&lt;<span class="title">share-prepared-statements</span>&gt;</span>false<span class="tag">&lt;/<span class="title">share-prepared-statements</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">statement</span>&gt;</span>
<span class="tag">&lt;/<span class="title">xa-datasource</span>&gt;</span>
</code></pre><p>Nesse ponto você deve prestar atenção em informações como ips, usuários, senhas e substituir de acordo com o seu ambiente, além disso, perceba que na tag <code>&lt;driver&gt;</code> usamos o nome do driver do jdbcdslog que definiremos no próximo passo.</p>
<p>5 - Dentro da tag <code>&lt;datasources&gt;</code> (standalone.xml)  acrescentar a definição do driver que faz o log:</p>
<pre><code><span class="tag">&lt;<span class="title">drivers</span>&gt;</span>
    <span class="tag">&lt;<span class="title">driver</span> <span class="attribute">name</span>=<span class="value">"jdbcdslog"</span> <span class="attribute">module</span>=<span class="value">"com.googlecode.usc.jdbcdslog"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">driver-class</span>&gt;</span>org.jdbcdslog.DriverLoggingProxy<span class="tag">&lt;/<span class="title">driver-class</span>&gt;</span>
        <span class="tag">&lt;<span class="title">xa-datasource-class</span>&gt;</span>org.jdbcdslog.XADataSourceProxy<span class="tag">&lt;/<span class="title">xa-datasource-class</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">driver</span>&gt;</span>
<span class="tag">&lt;/<span class="title">drivers</span>&gt;</span>
</code></pre><p>Pronto, com isso já poderemos usar o datasource e verificar no log do JBoss que qualquer select, update, insert etc que for feito através das conexões desse datasource serão logadas, a saída será algo como:</p>
<pre><code>11:35:00,066 INFO  [org.jdbcdslog.StatementLogger] (EJB default - 6) <span class="operator">select u.<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span> u <span class="keyword">where</span> u.login=<span class="string">'admin'</span>;</span>
</code></pre><p>Se você usa um XA-DataSource talvez se depare com o seguinte erro:</p>
<pre><code><span class="type">Caused</span> by: javax.resource.<span class="type">ResourceException</span>: <span class="type">IJ000453</span>: <span class="type">Unable</span> to get managed connection <span class="keyword">for</span> java:/<span class="type">MPINFO</span>-<span class="type">XA</span>-<span class="type">Datasource</span>

<span class="type">Caused</span> by: java.lang.<span class="type">LinkageError</span>: loader constraint violation: loader (instance of &lt;bootloader&gt;) previously initiated loading <span class="keyword">for</span> a different <span class="class"><span class="keyword">type</span> <span class="keyword"><span class="keyword">with</span></span> <span class="title">name</span> "<span class="title">javax/transaction/xa/XAResource</span>"</span>
</code></pre><p>A exceção acontece devido a um problema de ClassLoader no JBoss, a questão é que existem duas definições para a classe javax.transaction.xa.XAResource: uma que fica no pacote padrão da JVM e outra que fica num jar dentro do JBoss. Então, por algum motivo, o JBoss carrega a classe a partir da sua lib e o jdbcdslog carrega a classe a partir da lib padrão da JVM (rt.jar) e com isso ocorre a exceção alegando que uma classe com esse mesmo nome já havia sido carregada. Pois bem, para resolver isso ajustei uma configuração no JBoss para evitar que ele carregue a classe que está contida nas suas próprias libs e carregue somente a classe a partir da JVM. O procedimento consiste em alterar o conteúdo do arquivo JBOSS_HOME/modules/system/layers/base/javax/transaction/api/main/module.xml:</p>
<pre><code><span class="tag">&lt;<span class="title">module</span> <span class="attribute">xmlns</span>=<span class="value">"urn:jboss:module:1.1"</span> <span class="attribute">name</span>=<span class="value">"javax.transaction.api"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">resources</span>&gt;</span>
        <span class="tag">&lt;<span class="title">resource-root</span> <span class="attribute">path</span>=<span class="value">"jboss-transaction-api_1.1_spec-1.0.1.Final-redhat-2.jar"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">filter</span>&gt;</span>
                <span class="tag">&lt;<span class="title">exclude</span> <span class="attribute">path</span>=<span class="value">"javax/transaction/xa"</span>/&gt;</span>
                <span class="tag">&lt;<span class="title">include</span> <span class="attribute">path</span>=<span class="value">"**"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">filter</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">resource-root</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">resources</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
        <span class="tag">&lt;<span class="title">system</span> <span class="attribute">export</span>=<span class="value">"true"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">paths</span>&gt;</span>
                <span class="tag">&lt;<span class="title">path</span> <span class="attribute">name</span>=<span class="value">"javax/transaction/xa"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">paths</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">system</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="title">module</span>&gt;</span>
</code></pre><p>Recomendo que você salve o arquivo original antes de fazer qualquer modificação, ele provavelmente não terá a tag <code>&lt;dependencies&gt;</code> e também não terá a tag <code>&lt;filter&gt;</code>. Com esse ajuste terminamos todas as configurações necessárias, agora é testar e verificar que o log gerado está de acordo com os comandos executados.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Uma necessidade básica em quase todos os projetos de software é o log de instruções SQL e para esse fim existe uma infinidade de opções. No entanto, apesar das várias alternativas, muitas vezes o log não é feito da melhor forma:</p>]]>
    
    </summary>
    
      <category term="Hibernate" scheme="http://marlonpatrick.info/tags/Hibernate/"/>
    
      <category term="JBOSS" scheme="http://marlonpatrick.info/tags/JBOSS/"/>
    
      <category term="JPA" scheme="http://marlonpatrick.info/tags/JPA/"/>
    
      <category term="Log" scheme="http://marlonpatrick.info/tags/Log/"/>
    
      <category term="SQL" scheme="http://marlonpatrick.info/tags/SQL/"/>
    
      <category term="jdbcdslog" scheme="http://marlonpatrick.info/tags/jdbcdslog/"/>
    
      <category term="JBOSS" scheme="http://marlonpatrick.info/categories/JBOSS/"/>
    
      <category term="SQL" scheme="http://marlonpatrick.info/categories/JBOSS/SQL/"/>
    
      <category term="Log" scheme="http://marlonpatrick.info/categories/JBOSS/SQL/Log/"/>
    
      <category term="Hibernate" scheme="http://marlonpatrick.info/categories/JBOSS/SQL/Log/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JBOSS: SQL log in a simple way with jdbcdslog]]></title>
    <link href="http://marlonpatrick.info/en/2014/12/14/jboss-sql-log-in-simple-way-with-jdbcdslog/"/>
    <id>http://marlonpatrick.info/en/2014/12/14/jboss-sql-log-in-simple-way-with-jdbcdslog/</id>
    <published>2014-12-14T20:36:00.000Z</published>
    <updated>2015-08-03T01:43:09.889Z</updated>
    <content type="html"><![CDATA[<p>A basic necessity in almost every software project is the log of SQL statements and for this purpose there is a plethora of options. However, despite the many alternatives, the log is often not made the best way:</p>
<a id="more"></a>
<ul>
<li>Excessive log: too much is logged (queries, opening and closing connections, opening and closing resultsets) and the programmer does not have the possibility to configure what should or should not be logged.</li>
<li>Lack of integration with logging frameworks: the lib caters well to the SQL Log requirements, however, does not integrate with logging frameworks (log4j, java logging, apache commons logging) which ultimately forcing the developer to create a specific log file to SQL.</li>
<li>Problems to work with DataSources, in particular XA-DataSources: a well logging tool meets the above two requirements, however, is limited to use with java.sql.Connection objects, or in other cases may be used with “normal” DataSources, however, do not meet when we need to log sql XA-DataSource.</li>
</ul>
<p>For those who use Hibernate first choice is usually set it to log the generated queries, the result is something like:</p>
<pre><code><span class="operator">select this_.code <span class="keyword">from</span> employee this_ <span class="keyword">where</span> this_.code=?
<span class="keyword">INSERT</span> <span class="keyword">INTO</span> stock_transaction (<span class="keyword">CHANGE</span>, <span class="keyword">CLOSE</span>, <span class="built_in">DATE</span>, <span class="keyword">OPEN</span>, STOCK_ID, VOLUME) <span class="keyword">VALUES</span> (?, ?, ?, ?, ?, ?)</span>
</code></pre><p>In this case we have two problems, the first is that the values of the filters and columns are not logged in, only the character <strong>?</strong> is shown indicating that was replaced by a parameter. The other problem is that queries are not always carried out by Hibernate, in such cases the log would not be displayed, not even the log without parameters.</p>
<p>Well, after testing some sql log libs found one that met me in all these aspects: control of what is logged, integration with the most popular logging frameworks, work with Connection, DataSource and XA-DataSource, log sql with all its parameters so that I can copy and paste in the database access tool and run the script, and finally, log any sql that be through the monitored connection is made by Hibernate or otherwise. The lib name is <a href="https://code.google.com/p/jdbcdslog/" title="jdbcdslog" target="_blank">jdbcdslog</a>.</p>
<p>The most basic example is logging the queries of a single Connection object:</p>
<pre><code>public static void main<span class="params">(String[] args)</span> throws Exception {
    Class.forName<span class="params">(<span class="string">"org.jdbcdslog.DriverLoggingProxy"</span>)</span>;

    String url = <span class="string">"jdbc:jdbcdslog:postgresql://172.16.1.6:5432/mpinfo;targetDriver=org.postgresql.Driver"</span>;
    Connection con = DriverManager.getConnection<span class="params">(url, <span class="string">"mpinfo"</span>, <span class="string">"mpinfo"</span>)</span>;

    PreparedStatement ps = con.prepareStatement<span class="params">(<span class="string">"select * from product where id=?"</span>)</span>;
    ps.setLong<span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span>;
    ps.execute<span class="params">()</span>;

    con.close<span class="params">()</span>;
}
</code></pre><p>In this example I am accessing a PostgreSQL database and notice that the URL is a little different from the norm because jdbcdslog must add the driver as a proxy for the original driver Postgres. You can see this in <strong>jdbc:jdbcdslog:postgresql</strong> and also in <strong>targetDriver</strong> parameter. The result of this code is something like:</p>
<pre><code>[main] INFO org.jdbcdslog.StatementLogger - <span class="operator">select * <span class="keyword">from</span> ceos.product <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span>
</code></pre><p>But what I want to demonstrate even here in this post is how to use this lib to log sql datasources in JBoss, here in my enviroment I will use the JBoss EAP 6.2, but I think from the version of JBoss 7 does not change almost nothing. To do this we create modules to JBoss with the Postgres driver and also jdbcdslog.</p>
<p>1 - First we must create the folder JBOSS_HOME/modules/system/layers/base/org/postgresql/main/. Inside that folder put the Postgres jar according to the version you use, for example, postgresql-9.3-1101-jdbc41.jar. In addition we must create a file called module.xml with the following content:</p>
<pre><code><span class="tag">&lt;<span class="title">module</span> <span class="attribute">xmlns</span>=<span class="value">"urn:jboss:module:1.1"</span> <span class="attribute">name</span>=<span class="value">"org.postgresql"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">resources</span>&gt;</span>
        <span class="tag">&lt;<span class="title">resource-root</span> <span class="attribute">path</span>=<span class="value">"postgresql-9.3-1101-jdbc41.jar"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">resources</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"javax.api"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"javax.transaction.api"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="title">module</span>&gt;</span>
</code></pre><p>This procedure should be done for any database you want to log the queries, either Postgres, Oracle, MySQL etc. The logic is the same, just pay attention to the names of the files and folder which will be placed. The suggestion is to use the name of the main jar package in the case of Postgres is org.postgresql.</p>
<p>2 - Now is the time to create the jdbcdslog module. For this we create the folder JBOSS_HOME/modules/system/layers/base/com/googlecode/usc/jdbcdslog/main/. In this folder we will put the jdbcdslog jar, for example, jdbcdslog-1.0.6.2.jar. We also need to create a file called module.xml with the following content:</p>
<pre><code><span class="tag">&lt;<span class="title">module</span> <span class="attribute">xmlns</span>=<span class="value">"urn:jboss:module:1.1"</span> <span class="attribute">name</span>=<span class="value">"com.googlecode.usc.jdbcdslog"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">resources</span>&gt;</span>
        <span class="tag">&lt;<span class="title">resource-root</span> <span class="attribute">path</span>=<span class="value">"jdbcdslog-1.0.6.2.jar"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">resources</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"org.slf4j"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"javax.api"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"javax.transaction.api"</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">module</span> <span class="attribute">name</span>=<span class="value">"org.postgresql"</span> <span class="attribute">optional</span>=<span class="value">"true"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="title">module</span>&gt;</span>
</code></pre><p>Note that the Postgres module dependency is optional. It must include modules from other databases (Oracle, MySQL) as module dependency of jdbcdslog if you want to log them as well.</p>
<p>3 - Now open the file JBOSS_HOME/standalone/configuration/standalone.xml and configure the jdbcdslog logs. Look for the log subsystem tag, something like <code>&lt;subsystem xmlns=&quot;urn:jboss:domain:logging:1.3&quot;&gt;</code> within this tag place the following contents:</p>
<pre><code><span class="tag">&lt;<span class="title">logger</span> <span class="attribute">category</span>=<span class="value">"org.jdbcdslog.StatementLogger"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">level</span> <span class="attribute">name</span>=<span class="value">"DEBUG"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">logger</span>&gt;</span>
<span class="tag">&lt;<span class="title">logger</span> <span class="attribute">category</span>=<span class="value">"org.jdbcdslog.ConnectionLogger"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">level</span> <span class="attribute">name</span>=<span class="value">"OFF"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">logger</span>&gt;</span>
<span class="tag">&lt;<span class="title">logger</span> <span class="attribute">category</span>=<span class="value">"org.jdbcdslog.ResultSetLogger"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">level</span> <span class="attribute">name</span>=<span class="value">"OFF"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">logger</span>&gt;</span>
<span class="tag">&lt;<span class="title">logger</span> <span class="attribute">category</span>=<span class="value">"org.jdbcdslog.SlowQueryLogger"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">level</span> <span class="attribute">name</span>=<span class="value">"OFF"</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">logger</span>&gt;</span>
</code></pre><p>The various logging options available, the only one left active was the log statements, ie DML and DDL commands log.</p>
<p>NOTE: If your JBoss is running in domain mode rather than standalone then this setting can be made to the file JBOSS_HOME/domain/configuration/domain.xml.</p>
<p>4 - Still in standalone.xml file we will create the datasource. Below are two examples, one for a normal datasource and one for an XA-DataSoure, both should stay within the <code>&lt;datasources&gt;</code> tag:</p>
<pre><code><span class="tag">&lt;<span class="title">datasource</span> <span class="attribute">jta</span>=<span class="value">"true"</span> <span class="attribute">jndi-name</span>=<span class="value">"java:/mpinfods"</span> <span class="attribute">pool-name</span>=<span class="value">"MPINFO-POOL"</span> <span class="attribute">enabled</span>=<span class="value">"true"</span> <span class="attribute">use-ccm</span>=<span class="value">"true"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">connection-url</span>&gt;</span>jdbc:jdbcdslog:postgresql://172.16.1.6:5432/mpinfo;targetDriver=org.postgresql.Driver<span class="tag">&lt;/<span class="title">connection-url</span>&gt;</span>
    <span class="tag">&lt;<span class="title">driver</span>&gt;</span>jdbcdslog<span class="tag">&lt;/<span class="title">driver</span>&gt;</span>
    <span class="tag">&lt;<span class="title">new-connection-sql</span>&gt;</span>select 1<span class="tag">&lt;/<span class="title">new-connection-sql</span>&gt;</span>
    <span class="tag">&lt;<span class="title">transaction-isolation</span>&gt;</span>TRANSACTION_READ_COMMITTED<span class="tag">&lt;/<span class="title">transaction-isolation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">pool</span>&gt;</span>
    <span class="tag">&lt;<span class="title">min-pool-size</span>&gt;</span>10<span class="tag">&lt;/<span class="title">min-pool-size</span>&gt;</span>
    <span class="tag">&lt;<span class="title">max-pool-size</span>&gt;</span>20<span class="tag">&lt;/<span class="title">max-pool-size</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">pool</span>&gt;</span>
    <span class="tag">&lt;<span class="title">security</span>&gt;</span>
    <span class="tag">&lt;<span class="title">user-name</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">user-name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">password</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">password</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">security</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validate-on-match</span>&gt;</span>false<span class="tag">&lt;/<span class="title">validate-on-match</span>&gt;</span>
    <span class="tag">&lt;<span class="title">background-validation</span>&gt;</span>false<span class="tag">&lt;/<span class="title">background-validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">background-validation-millis</span>&gt;</span>1<span class="tag">&lt;/<span class="title">background-validation-millis</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">statement</span>&gt;</span>
    <span class="tag">&lt;<span class="title">prepared-statement-cache-size</span>&gt;</span>32<span class="tag">&lt;/<span class="title">prepared-statement-cache-size</span>&gt;</span>
    <span class="tag">&lt;<span class="title">share-prepared-statements</span>&gt;</span>false<span class="tag">&lt;/<span class="title">share-prepared-statements</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">statement</span>&gt;</span>
<span class="tag">&lt;/<span class="title">datasource</span>&gt;</span>

<span class="tag">&lt;<span class="title">xa-datasource</span> <span class="attribute">jndi-name</span>=<span class="value">"java:/mpinfoxads"</span> <span class="attribute">pool-name</span>=<span class="value">"MPINFO-XA-POOL"</span> <span class="attribute">enabled</span>=<span class="value">"true"</span> <span class="attribute">use-ccm</span>=<span class="value">"true"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-datasource-property</span> <span class="attribute">name</span>=<span class="value">"PortNumber"</span>&gt;</span>5432<span class="tag">&lt;/<span class="title">xa-datasource-property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-datasource-property</span> <span class="attribute">name</span>=<span class="value">"DatabaseName"</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">xa-datasource-property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-datasource-property</span> <span class="attribute">name</span>=<span class="value">"ServerName"</span>&gt;</span>172.16.1.6<span class="tag">&lt;/<span class="title">xa-datasource-property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-datasource-property</span> <span class="attribute">name</span>=<span class="value">"targetDS"</span>&gt;</span>org.postgresql.xa.PGXADataSource<span class="tag">&lt;/<span class="title">xa-datasource-property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">driver</span>&gt;</span>jdbcdslog<span class="tag">&lt;/<span class="title">driver</span>&gt;</span>
    <span class="tag">&lt;<span class="title">new-connection-sql</span>&gt;</span>select 1<span class="tag">&lt;/<span class="title">new-connection-sql</span>&gt;</span>
    <span class="tag">&lt;<span class="title">transaction-isolation</span>&gt;</span>TRANSACTION_READ_COMMITTED<span class="tag">&lt;/<span class="title">transaction-isolation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">xa-pool</span>&gt;</span>
        <span class="tag">&lt;<span class="title">min-pool-size</span>&gt;</span>0<span class="tag">&lt;/<span class="title">min-pool-size</span>&gt;</span>
        <span class="tag">&lt;<span class="title">max-pool-size</span>&gt;</span>10<span class="tag">&lt;/<span class="title">max-pool-size</span>&gt;</span>
        <span class="tag">&lt;<span class="title">flush-strategy</span>&gt;</span>IdleConnections<span class="tag">&lt;/<span class="title">flush-strategy</span>&gt;</span>
        <span class="tag">&lt;<span class="title">is-same-rm-override</span>&gt;</span>false<span class="tag">&lt;/<span class="title">is-same-rm-override</span>&gt;</span>
        <span class="tag">&lt;<span class="title">interleaving</span>&gt;</span>false<span class="tag">&lt;/<span class="title">interleaving</span>&gt;</span>
        <span class="tag">&lt;<span class="title">pad-xid</span>&gt;</span>false<span class="tag">&lt;/<span class="title">pad-xid</span>&gt;</span>
        <span class="tag">&lt;<span class="title">wrap-xa-resource</span>&gt;</span>false<span class="tag">&lt;/<span class="title">wrap-xa-resource</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">xa-pool</span>&gt;</span>
    <span class="tag">&lt;<span class="title">security</span>&gt;</span>
        <span class="tag">&lt;<span class="title">user-name</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">user-name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">password</span>&gt;</span>mpinfo<span class="tag">&lt;/<span class="title">password</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">security</span>&gt;</span>
    <span class="tag">&lt;<span class="title">validation</span>&gt;</span>
        <span class="tag">&lt;<span class="title">valid-connection-checker</span> <span class="attribute">class-name</span>=<span class="value">"org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">validate-on-match</span>&gt;</span>true<span class="tag">&lt;/<span class="title">validate-on-match</span>&gt;</span>
        <span class="tag">&lt;<span class="title">background-validation</span>&gt;</span>false<span class="tag">&lt;/<span class="title">background-validation</span>&gt;</span>
        <span class="tag">&lt;<span class="title">exception-sorter</span> <span class="attribute">class-name</span>=<span class="value">"org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">validation</span>&gt;</span>
    <span class="tag">&lt;<span class="title">timeout</span>&gt;</span>
        <span class="tag">&lt;<span class="title">idle-timeout-minutes</span>&gt;</span>3<span class="tag">&lt;/<span class="title">idle-timeout-minutes</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">timeout</span>&gt;</span>
    <span class="tag">&lt;<span class="title">statement</span>&gt;</span>
        <span class="tag">&lt;<span class="title">track-statements</span>&gt;</span>true<span class="tag">&lt;/<span class="title">track-statements</span>&gt;</span>
        <span class="tag">&lt;<span class="title">share-prepared-statements</span>&gt;</span>false<span class="tag">&lt;/<span class="title">share-prepared-statements</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">statement</span>&gt;</span>
<span class="tag">&lt;/<span class="title">xa-datasource</span>&gt;</span>
</code></pre><p>At this point you should pay attention to information as IPs, users, passwords and replace according to your environment, moreover, realize that the tag <code>&lt;driver&gt;</code> use the jdbcdslog driver name that will define the next step.</p>
<p>5 - Within the <code>&lt;datasources&gt;</code> tag (standalone.xml) add a driver setting that makes the log:</p>
<pre><code><span class="tag">&lt;<span class="title">drivers</span>&gt;</span>
    <span class="tag">&lt;<span class="title">driver</span> <span class="attribute">name</span>=<span class="value">"jdbcdslog"</span> <span class="attribute">module</span>=<span class="value">"com.googlecode.usc.jdbcdslog"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">driver-class</span>&gt;</span>org.jdbcdslog.DriverLoggingProxy<span class="tag">&lt;/<span class="title">driver-class</span>&gt;</span>
        <span class="tag">&lt;<span class="title">xa-datasource-class</span>&gt;</span>org.jdbcdslog.XADataSourceProxy<span class="tag">&lt;/<span class="title">xa-datasource-class</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">driver</span>&gt;</span>
<span class="tag">&lt;/<span class="title">drivers</span>&gt;</span>
</code></pre><p>There, it can already use the datasource and check the log JBoss any select, update, insert which is done through the connections that datasource will be logged, the output will look like:</p>
<pre><code>11:35:00,066 INFO  [org.jdbcdslog.StatementLogger] (EJB default - 6) <span class="operator">select u.<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span> u <span class="keyword">where</span> u.login=<span class="string">'admin'</span>;</span>
</code></pre><p>If you use an XA-DataSource may be confronted with the following error:</p>
<pre><code><span class="type">Caused</span> by: javax.resource.<span class="type">ResourceException</span>: <span class="type">IJ000453</span>: <span class="type">Unable</span> to get managed connection <span class="keyword">for</span> java:/<span class="type">MPINFO</span>-<span class="type">XA</span>-<span class="type">Datasource</span>

<span class="type">Caused</span> by: java.lang.<span class="type">LinkageError</span>: loader constraint violation: loader (instance of &lt;bootloader&gt;) previously initiated loading <span class="keyword">for</span> a different <span class="class"><span class="keyword">type</span> <span class="keyword"><span class="keyword">with</span></span> <span class="title">name</span> "<span class="title">javax/transaction/xa/XAResource</span>"</span>
</code></pre><p>The exception is due to a ClassLoader problem in JBoss, the issue is that there are two definitions for javax.transaction.xa.XAResource class: one that is in the standard JVM package and one that is in a jar inside the JBoss. Then, for some reason, JBoss loads the class from your lib and jdbcdslog loads the class from the standard JVM lib (rt.jar) and this is the exception claiming a class with the same name already have been loaded. Well, to solve this adjusted a setting in JBoss to prevent it from load the class that is contained in their own libs and load only the class from the JVM. The procedure is to change the contents of the file JBOSS_HOME/modules/system/layers/base/javax/transaction/api/main/module.xml:</p>
<pre><code><span class="tag">&lt;<span class="title">module</span> <span class="attribute">xmlns</span>=<span class="value">"urn:jboss:module:1.1"</span> <span class="attribute">name</span>=<span class="value">"javax.transaction.api"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">resources</span>&gt;</span>
        <span class="tag">&lt;<span class="title">resource-root</span> <span class="attribute">path</span>=<span class="value">"jboss-transaction-api_1.1_spec-1.0.1.Final-redhat-2.jar"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">filter</span>&gt;</span>
                <span class="tag">&lt;<span class="title">exclude</span> <span class="attribute">path</span>=<span class="value">"javax/transaction/xa"</span>/&gt;</span>
                <span class="tag">&lt;<span class="title">include</span> <span class="attribute">path</span>=<span class="value">"**"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">filter</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">resource-root</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">resources</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span>
        <span class="tag">&lt;<span class="title">system</span> <span class="attribute">export</span>=<span class="value">"true"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">paths</span>&gt;</span>
                <span class="tag">&lt;<span class="title">path</span> <span class="attribute">name</span>=<span class="value">"javax/transaction/xa"</span>/&gt;</span>
            <span class="tag">&lt;/<span class="title">paths</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">system</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span>
<span class="tag">&lt;/<span class="title">module</span>&gt;</span>
</code></pre><p>I recommend that you save the original file before making any change, it probably will not have the tag <code>&lt;dependencies&gt;</code> and also will not have the tag `<filter> ‘. With this setting finish all necessary settings, now test and verify that the log is generated in accordance with the executed commands.</filter></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>A basic necessity in almost every software project is the log of SQL statements and for this purpose there is a plethora of options. However, despite the many alternatives, the log is often not made the best way:</p>]]>
    
    </summary>
    
      <category term="Hibernate" scheme="http://marlonpatrick.info/tags/Hibernate/"/>
    
      <category term="JBOSS" scheme="http://marlonpatrick.info/tags/JBOSS/"/>
    
      <category term="JPA" scheme="http://marlonpatrick.info/tags/JPA/"/>
    
      <category term="Log" scheme="http://marlonpatrick.info/tags/Log/"/>
    
      <category term="SQL" scheme="http://marlonpatrick.info/tags/SQL/"/>
    
      <category term="jdbcdslog" scheme="http://marlonpatrick.info/tags/jdbcdslog/"/>
    
      <category term="JBOSS" scheme="http://marlonpatrick.info/categories/JBOSS/"/>
    
      <category term="Log" scheme="http://marlonpatrick.info/categories/JBOSS/Log/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JasperReports: Resolvendo NoSuchMethodError ao usar uma imagem]]></title>
    <link href="http://marlonpatrick.info/pt-br/2014/04/28/jasperreports-resolvendo-nosuchmethoderror-ao-usar-uma-imagem/"/>
    <id>http://marlonpatrick.info/pt-br/2014/04/28/jasperreports-resolvendo-nosuchmethoderror-ao-usar-uma-imagem/</id>
    <published>2014-04-28T12:21:00.000Z</published>
    <updated>2015-08-02T13:14:51.862Z</updated>
    <content type="html"><![CDATA[<p>O erro acontece quando você tenta gerar um relatório feito com Jasper/iReport que usa uma imagem. A mensagem de erro é algo como: <strong>Caused by: java.lang.NoSuchMethodError: com.lowagie.text.Image.getPlainWidth()F</strong>.</p>
<a id="more"></a>
<p>O problema é que você está usando uma versão do iText incompatível com a versão do JasperReports. Até a versão 3.0.0 do Jasper/iReport a versão correta do iText é 1.3.1. A partir da versão 3.1.0 do Jasper/iReport a versão correta do iText é 2.1.0.</p>
<p>Uma dica melhor é verificar a pasta lib do seu iReport o qual irá conter todas as libs com suas versões corretas, assim, pode garantir que está usando a versão adequada de cada dependência do Jasper.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>O erro acontece quando você tenta gerar um relatório feito com Jasper/iReport que usa uma imagem. A mensagem de erro é algo como: <strong>Caused by: java.lang.NoSuchMethodError: com.lowagie.text.Image.getPlainWidth()F</strong>.</p>]]>
    
    </summary>
    
      <category term="JasperReports" scheme="http://marlonpatrick.info/tags/JasperReports/"/>
    
      <category term="iReport" scheme="http://marlonpatrick.info/tags/iReport/"/>
    
      <category term="iText" scheme="http://marlonpatrick.info/tags/iText/"/>
    
      <category term="JasperReports" scheme="http://marlonpatrick.info/categories/JasperReports/"/>
    
      <category term="iReport" scheme="http://marlonpatrick.info/categories/JasperReports/iReport/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JasperReports: Solving NoSuchMethodError to use an image]]></title>
    <link href="http://marlonpatrick.info/en/2014/04/28/jasperreports-solving-nosuchmethoderror-to-use-an-image/"/>
    <id>http://marlonpatrick.info/en/2014/04/28/jasperreports-solving-nosuchmethoderror-to-use-an-image/</id>
    <published>2014-04-28T12:21:00.000Z</published>
    <updated>2015-08-03T00:48:19.018Z</updated>
    <content type="html"><![CDATA[<p>The error occurs when you try to generate a report made with Jasper/iReport using an image. The error message is something like: <strong>Caused by: java.lang.NoSuchMethodError: com.lowagie.text.Image.getPlainWidth ()F&lt;/ strong&gt;.</strong></p>
<a id="more"></a>
<p>The problem is that you are using a version of iText incompatible with the version of JasperReports. Until the version 3.0.0 of the Jasper/iReport the correct version of iText is 1.3.1. Starting with version 3.1.0 of the Jasper/iReport the correct version of iText is 2.1.0.</p>
<p>A better tip is to check the lib folder of your iReport which will contain all the libs with their correct versions, so you can ensure you are using the appropriate version of each dependency of JasperReports.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The error occurs when you try to generate a report made with Jasper/iReport using an image. The error message is something like: <strong>Caused by: java.lang.NoSuchMethodError: com.lowagie.text.Image.getPlainWidth ()F&lt;/ strong&gt;.</p>]]>
    
    </summary>
    
      <category term="JasperReports" scheme="http://marlonpatrick.info/tags/JasperReports/"/>
    
      <category term="iReport" scheme="http://marlonpatrick.info/tags/iReport/"/>
    
      <category term="iText" scheme="http://marlonpatrick.info/tags/iText/"/>
    
      <category term="JasperReports" scheme="http://marlonpatrick.info/categories/JasperReports/"/>
    
      <category term="iReport" scheme="http://marlonpatrick.info/categories/JasperReports/iReport/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PrimeFaces: around problems with resizable/draggable dataTable]]></title>
    <link href="http://marlonpatrick.info/en/2014/04/26/primefaces-around-problems-with-resizable-slash-draggable-datatable/"/>
    <id>http://marlonpatrick.info/en/2014/04/26/primefaces-around-problems-with-resizable-slash-draggable-datatable/</id>
    <published>2014-04-26T19:29:00.000Z</published>
    <updated>2015-08-03T02:48:48.522Z</updated>
    <content type="html"><![CDATA[<p>I will leave here workarounds for some PrimeFaces bugs when using dataTable with features resizable or draggable. Some of these bugs have been corrected, but if for some reason you like me works with any version of PrimeFaces containing the error and can not update it will be of great help.</p>
<a id="more"></a>
<p><strong>1 - NullPointerException to resize the size of a column (fixed in version 3.5)</strong></p>
<p>The problem occurs in a dataTable which is resizable and draggable at the same time. I found the following tickets in the PrimeFaces issue tracker to address the problem: <a href="https://code.google.com/p/primefaces/issues/detail?id=3674" title="Issue 3674" target="_blank">3674</a>, <a href="https://code.google.com/p/primefaces/issues/detail?id=4012" title="Issue 4012" target="_blank">4012</a>,<a href="https://code.google.com/p/primefaces/issues/detail?id=4796" title="Issue 4796" target="_blank">4796</a> and <a href="https://code.google.com/p/primefaces/issues/detail?id=5167" title="Issue 5167" target="_blank">5167</a>. In version 3.4.1 of PrimeFaces the error log is something like:</p>
<pre><code><span class="number">01</span>:<span class="number">40</span>:<span class="number">49</span>,<span class="number">907</span> INFO  [javax<span class="class">.enterprise</span><span class="class">.resource</span><span class="class">.webcontainer</span><span class="class">.jsf</span><span class="class">.context</span>] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">1</span>) java<span class="class">.lang</span><span class="class">.NullPointerException</span>: java<span class="class">.lang</span><span class="class">.NullPointerException</span>
at org<span class="class">.primefaces</span><span class="class">.component</span><span class="class">.datatable</span><span class="class">.feature</span><span class="class">.ResizableColumnsFeature</span><span class="class">.decode</span>(ResizableColumnsFeature<span class="class">.java</span>:<span class="number">35</span>) [primefaces-<span class="number">3.4</span>.<span class="number">1</span><span class="class">.jar</span>:]
at org<span class="class">.primefaces</span><span class="class">.component</span><span class="class">.datatable</span><span class="class">.DataTableRenderer</span><span class="class">.decode</span>(DataTableRenderer<span class="class">.java</span>:<span class="number">53</span>) [primefaces-<span class="number">3.4</span>.<span class="number">1</span><span class="class">.jar</span>:]
at javax<span class="class">.faces</span><span class="class">.component</span><span class="class">.UIComponentBase</span><span class="class">.decode</span>(UIComponentBase<span class="class">.java</span>:<span class="number">787</span>) [jboss-jsf-api_2.<span class="number">1</span>_spec-<span class="number">2.0</span>.<span class="number">1</span><span class="class">.Final</span><span class="class">.jar</span>:<span class="number">2.0</span>.<span class="number">1</span>.Final]
at org<span class="class">.primefaces</span><span class="class">.component</span><span class="class">.api</span><span class="class">.UIData</span><span class="class">.processDecodes</span>(UIData<span class="class">.java</span>:<span class="number">224</span>) [primefaces-<span class="number">3.4</span>.<span class="number">1</span><span class="class">.jar</span>:]
at com<span class="class">.sun</span><span class="class">.faces</span><span class="class">.context</span><span class="class">.PartialViewContextImpl</span><span class="variable">$PhaseAwareVisitCallback</span>.<span class="function"><span class="title">visit</span><span class="params">(PartialViewContextImpl.java:<span class="number">506</span>)</span></span> [jsf-impl-<span class="number">2.1</span>.<span class="number">7</span>-jbossorg-<span class="number">2</span><span class="class">.jar</span>:]
at com<span class="class">.sun</span><span class="class">.faces</span><span class="class">.component</span><span class="class">.visit</span><span class="class">.PartialVisitContext</span><span class="class">.invokeVisitCallback</span>(PartialVisitContext<span class="class">.java</span>:<span class="number">183</span>) [jsf-impl-<span class="number">2.1</span>.<span class="number">7</span>-jbossorg-<span class="number">2</span><span class="class">.jar</span>:]
at org<span class="class">.primefaces</span><span class="class">.component</span><span class="class">.api</span><span class="class">.UIData</span><span class="class">.visitTree</span>(UIData<span class="class">.java</span>:<span class="number">635</span>) [primefaces-<span class="number">3.4</span>.<span class="number">1</span><span class="class">.jar</span>:]
</code></pre><p>Briefly the error happens because when you resize a column the PrimeFaces processes both resizing (resize) and the reordering (reorder) of the column. This can be easily realized if you use the colResize and colReorder event to generate a log.</p>
<p>A detailed explanation is as follows: to create the effect of the resize a column PrimeFaces creates a tag <code>&lt;span&gt;</code> in the header of the column and makes this tag an object <a href="http://jqueryui.com/draggable/" title="jQuery UI - Draggable" target="_blank">draggable</a>, thus when the user drags the “column” for her to stay greater or minor and loose there is a “collision” between the resizer and reorder feature of dataTable. This is because the report that the dataTable is draggable the PrimeFaces makes all draggable columns so that they can be dragged and reordered and makes the whole table header <a href="http://jqueryui.com/droppable/" title=" jQuery UI - Droppable" target="_blank">droppable</a>. The problem is that the implementation of PrimeFaces missed configuring the droppable to accept only reordering columns and thus to release the <code>&lt;span&gt;</code> that resizes to the drop reordering of the column is used and the PrimeFaces understands that the column is being reordered and resized, with this method you should adjust the size of the column does not receive a parameter (the id of the resized column) it needs to function properly and then causes the error.</p>
<p>To solve this problem I added a script after closing the tag <code>&lt;p:dataTable&gt;</code> that defines a specific scope for ‘<span>‘ which is used in resizing columns. So, to resize a column even if the user release the mouse on the table header of the drop column reordering will not be called because the draggable object ‘<span>‘ has a different scope of droppable object (table header). The code is as follows:</span></span></p>
<pre><code><span class="tag">&lt;<span class="title">p:dataTable</span> <span class="attribute">draggableColumns</span>=<span class="value">"true"</span> <span class="attribute">resizableColumns</span>=<span class="value">"true"</span>&gt;</span>
       <span class="comment">&lt;!-- your code --&gt;</span>
<span class="tag">&lt;/ <span class="attribute">p:</span> <span class="attribute">dataTable</span>&gt;</span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    $( <span class="string">".ui-column-resizer"</span> ).draggable( <span class="string">"option"</span>, <span class="string">"scope"</span>, <span class="string">'resizer'</span>);<span class="comment">//resizer is the name of the scope that chose, could be any other name</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><p><strong>2 - NullPointerException to resize a dynamic column (fixed in version 3.5.7)</strong></p>
<p>In this case simply just have a resizable dataTable with dynamic columns so that the error happens. I found the following tickets in the PrimeFaces issue tracker to address the problem: <a href="https://code.google.com/p/primefaces/issues/detail?id=4238" title="Issue 4238" target="_blank">4238</a> and <a href="https://code.google.com/p/primefaces/issues/detail?id=4797" title="Issue 4797" target="_blank">4797</a>. Funny that even with several people reporting the problem the PrimeFaces the team scored both issues as “Unable to replicate.” According to one observer the problem was resolved in version 3.5.7, but could not prove.</p>
<p>The point where the error occurs is the same as the case described above, so the log is similar and only what changes is the root cause of the problem. Previously, the NullPointer reason is that the parameter with the id of the resized column is not sent to the server, as in the case of dynamic columns, even when the id is sent PrimeFaces can not find the corresponding column. The method that is used to fetch the column by id is <code>DataTable.findColumn (String clinetId)</code> which only looks for simple columns and ignores the dynamics.</p>
<p>In my case, it was not so important that the Column object were found and that their width field was setted as the width used on my screen is stored in another specific object of my system. So my solution was only override the class that processes the resize the dataTable event (org.primefaces.component.datatable.feature.ResizableColumnsFeature), but specifically the decode method:</p>
<pre><code>@Override
<span class="keyword">public</span> <span class="literal">void</span> decode(FacesContext context, DataTable table) {
    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; <span class="keyword">params</span> = FacesContext<span class="built_in">.</span>getCurrentInstance()<span class="built_in">.</span>getExternalContext()<span class="built_in">.</span>getRequestParameterMap();
    <span class="built_in">String</span> clientId = table<span class="built_in">.</span>getClientId();

    <span class="built_in">String</span> columnId = <span class="keyword">params</span><span class="built_in">.</span>get(clientId + <span class="string">"_columnId"</span>);
    <span class="built_in">String</span> width = <span class="keyword">params</span><span class="built_in">.</span>get(clientId + <span class="string">"_width"</span>);
    Column column = table<span class="built_in">.</span>findColumn(columnId);

    <span class="keyword">if</span>(column != <span class="built_in">null</span>){ <span class="comment">//added this if that to avoid NullPointerException</span>
        column<span class="built_in">.</span>setWidth(<span class="built_in">Integer</span><span class="built_in">.</span>parseInt(width));
    }
}
</code></pre><p>Dessa forma o evento colResize pode ser invocado e é através dele que resolvo meu problema. Talvez o código seja difícil de aplicar em outro sistema, mas, de toda forma vou deixar aqui pelo menos para você ter uma idéia de como fiz e poder adaptar a solução:</p>
<p>Thus the colResize event can be invoked and it is through him that solve my problem. Perhaps the code is difficult to apply in another system, but anyway I will leave here at least you get an idea of how I did and be able to adapt the solution:</p>
<pre><code>public void onResizeColumn<span class="params">(ColumnResizeEvent event)</span> {
    <span class="keyword">if</span> <span class="params">(event.getColumn<span class="params">()</span> == null)</span> {
        String index = getColumnIndex<span class="params">(event)</span>;
        DynaColumn dynaColumn = this.getColumns<span class="params">()</span>.get<span class="params">(Integer.parseInt<span class="params">(index)</span>)</span>;<span class="comment">//getColumns() is the list you use to generate the dynamic columns</span>
        dynaColumn.setWidth<span class="params">(event.getWidth<span class="params">()</span>)</span>;<span class="comment">//DynaColumn is a particular object of my system</span>
    }
}

private String getColumnIndex<span class="params">(ColumnResizeEvent event)</span> {
    String columnId = FacesContext.getCurrentInstance<span class="params">()</span>.getExternalContext<span class="params">()</span>.getRequestParameterMap<span class="params">()</span>.get<span class="params">(event.getComponent<span class="params">()</span>.getClientId<span class="params">()</span> + <span class="string">"_columnId"</span>)</span>;
    String[] columnIdSplited = columnId.split<span class="params">(<span class="string">":"</span>)</span>;
    return columnIdSplited[columnIdSplited.length - <span class="number">1</span>];
}
</code></pre><p>In my JSF page using the DynaColumn.width field to set the size of the column even if the Column object PrimeFaces has not been updated.</p>
<pre><code><span class="xml"><span class="tag">&lt;<span class="title">p:dataTable</span> <span class="attribute">resizableColumns</span>=<span class="value">"true"</span>&gt;</span>
       <span class="comment">&lt;!-- your code --&gt;</span>
    <span class="tag">&lt;<span class="title">p:columns</span> <span class="attribute">value</span>=<span class="value">"#</span></span></span><span class="expression">{<span class="variable">viewManager.columns</span>}</span><span class="xml"><span class="tag"><span class="value">"</span> <span class="attribute">var</span>=<span class="value">"dynaColumn"</span>&gt;</span>
           <span class="comment">&lt;!-- your code --&gt;</span>
    <span class="tag">&lt;/<span class="title">p:columns</span>&gt;</span>
<span class="tag">&lt;/ <span class="attribute">p:</span> <span class="attribute">dataTable</span>&gt;</span>

<span class="tag">&lt;<span class="title">ui:repeat</span> <span class="attribute">var</span>=<span class="value">"dynaColumn"</span> <span class="attribute">value</span>=<span class="value">"#</span></span></span><span class="expression">{<span class="variable">viewManager.columns</span>}</span><span class="xml"><span class="tag"><span class="value">"</span> <span class="attribute">varStatus</span>=<span class="value">"status"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined">
        var columnWidth = #</span></span><span class="expression">{<span class="variable">dynaColumn.width</span>}</span><span class="xml"><span class="actionscript">;
        <span class="keyword">if</span>(columnWidth &gt; <span class="number">0</span>)</span></span><span class="expression">{
            $('[<span class="variable">id</span>=<span class="string">"dataTableID:dynamicColumns:#{status.index}"</span>]')<span class="variable">.</span>
                <span class="variable">children</span>('<span class="variable">.ui-dt-c</span>')<span class="variable">.css</span>('<span class="variable">width</span>',<span class="variable">columnWidth</span>);
        }</span><span class="xml"><span class="undefined">
    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>                
<span class="tag">&lt;/<span class="title">ui:repeat</span>&gt;</span></span>
</code></pre><p>The issue <a href="https://code.google.com/p/primefaces/issues/detail?id=4238" title="Issue 4238" target="_blank">4238</a> proposes another way around the problem, in addition, other possible solutions would adjust the ResizableColumnsFeature.decode method to search the column the right way or else the onResize set the Column object rather than a system object itself. If any of these fixes will be implemented javascript would not be necessary to adjust the width of columns in the JSF page thus simplifying the solution. In my case there is a business requirement that forced me to make the form presented here.</p>
<p><strong>3 - colReorder event runs for any ajax call and not only in the column reordering</strong></p>
<p>To simulate this error simply just have a draggable dataTable and make any ajax call on the screen. I found the ticket <a href="https://code.google.com/p/primefaces/issues/detail?id=4985" title="Issue 4985" target="_blank">4985</a> in the rimeFaces issue tracker that addresses the problem. The same was marked “not be corrected,” then I believe still happen in any version.</p>
<p>To solve the problem I overwrite the org.primefaces.component.datatable.feature.DraggableColumnsFeature class to adjust the shouldDecode method:</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">shouldDecode</span><span class="params">(FacesContext context, DataTable table)</span> </span>{
  <span class="keyword">return</span> table.isDraggableColumns() &amp;&amp; <span class="keyword">this</span>.isDragRequest(context);
}

<span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isDragRequest</span><span class="params">(FacesContext context)</span> </span>{
  String eventName =  context.getExternalContext().getRequestParameterMap().get(<span class="string">"javax.faces.behavior.event"</span>);

  <span class="keyword">if</span>(<span class="string">"colReorder"</span>.equals(eventName)){
    <span class="keyword">return</span> <span class="keyword">true</span>;
  }

  <span class="keyword">return</span> <span class="keyword">false</span>;
}
</code></pre><p>Thus, the colReorder event will now be called at the appropriate time.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I will leave here workarounds for some PrimeFaces bugs when using dataTable with features resizable or draggable. Some of these bugs have been corrected, but if for some reason you like me works with any version of PrimeFaces containing the error and can not update it will be of great help.</p>]]>
    
    </summary>
    
      <category term="DataTable" scheme="http://marlonpatrick.info/tags/DataTable/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/tags/JSF/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/tags/PrimeFaces/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/categories/PrimeFaces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PrimeFaces: contornando problemas com dataTable resizable/draggable]]></title>
    <link href="http://marlonpatrick.info/pt-br/2014/04/26/primefaces-contornando-problemas-com-datatable-resizable-slash-draggable/"/>
    <id>http://marlonpatrick.info/pt-br/2014/04/26/primefaces-contornando-problemas-com-datatable-resizable-slash-draggable/</id>
    <published>2014-04-26T19:29:00.000Z</published>
    <updated>2015-08-02T13:14:51.866Z</updated>
    <content type="html"><![CDATA[<p>Vou deixar aqui soluções alternativas para alguns bugs do PrimeFaces quando se usa dataTable com as features resizable ou draggable. Alguns desses bugs já foram corrigidos, mas, se por algum motivo você assim como eu trabalha com alguma versão do PrimeFaces que contém o erro e não pode atualizá-la será de grande ajuda.</p>
<a id="more"></a>
<p><strong>1 - NullPointerException ao redimensionar o tamanho de uma coluna (corrigido na versão 3.5)</strong></p>
<p>O problema acontece num dataTable que é resizable e draggable ao mesmo tempo. Encontrei os seguintes tickets no issue tracker do PrimeFaces para tratar do problema: <a href="https://code.google.com/p/primefaces/issues/detail?id=3674" title="Issue 3674" target="_blank">3674</a>, <a href="https://code.google.com/p/primefaces/issues/detail?id=4012" title="Issue 4012" target="_blank">4012</a>,<a href="https://code.google.com/p/primefaces/issues/detail?id=4796" title="Issue 4796" target="_blank">4796</a> e <a href="https://code.google.com/p/primefaces/issues/detail?id=5167" title="Issue 5167" target="_blank">5167</a>. Na versao 3.4.1 do PrimeFaces o log do erro é algo como:</p>
<pre><code><span class="number">01</span>:<span class="number">40</span>:<span class="number">49</span>,<span class="number">907</span> INFO  [javax<span class="class">.enterprise</span><span class="class">.resource</span><span class="class">.webcontainer</span><span class="class">.jsf</span><span class="class">.context</span>] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">1</span>) java<span class="class">.lang</span><span class="class">.NullPointerException</span>: java<span class="class">.lang</span><span class="class">.NullPointerException</span>
at org<span class="class">.primefaces</span><span class="class">.component</span><span class="class">.datatable</span><span class="class">.feature</span><span class="class">.ResizableColumnsFeature</span><span class="class">.decode</span>(ResizableColumnsFeature<span class="class">.java</span>:<span class="number">35</span>) [primefaces-<span class="number">3.4</span>.<span class="number">1</span><span class="class">.jar</span>:]
at org<span class="class">.primefaces</span><span class="class">.component</span><span class="class">.datatable</span><span class="class">.DataTableRenderer</span><span class="class">.decode</span>(DataTableRenderer<span class="class">.java</span>:<span class="number">53</span>) [primefaces-<span class="number">3.4</span>.<span class="number">1</span><span class="class">.jar</span>:]
at javax<span class="class">.faces</span><span class="class">.component</span><span class="class">.UIComponentBase</span><span class="class">.decode</span>(UIComponentBase<span class="class">.java</span>:<span class="number">787</span>) [jboss-jsf-api_2.<span class="number">1</span>_spec-<span class="number">2.0</span>.<span class="number">1</span><span class="class">.Final</span><span class="class">.jar</span>:<span class="number">2.0</span>.<span class="number">1</span>.Final]
at org<span class="class">.primefaces</span><span class="class">.component</span><span class="class">.api</span><span class="class">.UIData</span><span class="class">.processDecodes</span>(UIData<span class="class">.java</span>:<span class="number">224</span>) [primefaces-<span class="number">3.4</span>.<span class="number">1</span><span class="class">.jar</span>:]
at com<span class="class">.sun</span><span class="class">.faces</span><span class="class">.context</span><span class="class">.PartialViewContextImpl</span><span class="variable">$PhaseAwareVisitCallback</span>.<span class="function"><span class="title">visit</span><span class="params">(PartialViewContextImpl.java:<span class="number">506</span>)</span></span> [jsf-impl-<span class="number">2.1</span>.<span class="number">7</span>-jbossorg-<span class="number">2</span><span class="class">.jar</span>:]
at com<span class="class">.sun</span><span class="class">.faces</span><span class="class">.component</span><span class="class">.visit</span><span class="class">.PartialVisitContext</span><span class="class">.invokeVisitCallback</span>(PartialVisitContext<span class="class">.java</span>:<span class="number">183</span>) [jsf-impl-<span class="number">2.1</span>.<span class="number">7</span>-jbossorg-<span class="number">2</span><span class="class">.jar</span>:]
at org<span class="class">.primefaces</span><span class="class">.component</span><span class="class">.api</span><span class="class">.UIData</span><span class="class">.visitTree</span>(UIData<span class="class">.java</span>:<span class="number">635</span>) [primefaces-<span class="number">3.4</span>.<span class="number">1</span><span class="class">.jar</span>:]
</code></pre><p>De maneira resumida o erro acontece porque ao redimensionar uma coluna o PrimeFaces processa tanto o redimensionamento (resize) quanto a reordenação da coluna (reorder). Isso pode ser facilmente percebido se você usar os eventos colResize e colReorder para gerar algum log.</p>
<p>A explicação detalhada é a seguinte: para criar o efeito de redimensionar uma coluna o PrimeFaces cria uma tag <code>&lt;span&gt;</code> no cabeçalho da coluna e torna essa tag um objeto <a href="http://jqueryui.com/draggable/" title="jQuery UI - Draggable" target="_blank">draggable</a>, dessa forma, quando o usuário arrasta a “coluna” para ela ficar maior ou menor e a solta ocorre uma “colisão” entre a funcionalidade resizer e reorder do dataTable. Isso porque, ao informar que o dataTable é draggable o PrimeFaces torna todas as colunas draggable de modo que as mesmas possam ser arrastadas e reordenadas bem como torna todo o cabeçalho da tabela <a href="http://jqueryui.com/droppable/" title="jQuery UI - Droppable" target="_blank">droppable</a>. O problema é que a implementação do PrimeFaces esqueceu de configurar o droppable para aceitar apenas reordenação de colunas e com isso ao soltar o <code>&lt;span&gt;</code> que redimensiona a coluna o drop da reordenação é invocado e o PrimeFaces entende que a coluna está sendo reordenada e redimensionada, com isso o método que deveria ajustar o tamanho da coluna não recebe um parâmetro (o id da coluna redimensionada) que precisa para funcionar corretamente e então provoca o erro.</p>
<p>Para solucionar esse problema adicionei um script após o fechamento da tag <code>&lt;p:dataTable&gt;</code> que define um escopo específico para o <code>&lt;span&gt;</code> que é usado no redimensionamento das colunas. Assim, ao redimensionar uma coluna mesmo que o usuário solte o mouse sobre o cabeçalho da tabela o drop da reordenação de colunas não será chamado, pois, o objeto draggable <code>&lt;span&gt;</code> possui um escopo diferente do objeto droppable (cabeçalho da tabela). O código fica da seguinte forma:</p>
<pre><code><span class="tag">&lt;<span class="title">p:dataTable</span> <span class="attribute">draggableColumns</span>=<span class="value">"true"</span> <span class="attribute">resizableColumns</span>=<span class="value">"true"</span>&gt;</span>
       <span class="comment">&lt;!-- your code --&gt;</span>
<span class="tag">&lt;/ <span class="attribute">p:</span> <span class="attribute">dataTable</span>&gt;</span>

<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    $( <span class="string">".ui-column-resizer"</span> ).draggable( <span class="string">"option"</span>, <span class="string">"scope"</span>, <span class="string">'resizer'</span>);<span class="comment">//resizer é o nome do escopo que escolhi, poderia ser qualquer outro nome</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><p><strong>2 - NullPointerException ao redimensionar uma coluna dinâmica (corrigido na versão 3.5.7)</strong></p>
<p>Nesse caso basta apenas ter um dataTable resizable com colunas dinâmicas para que o erro aconteça. Encontrei os seguintes tickets no issue tracker do PrimeFaces para tratar do problema: <a href="https://code.google.com/p/primefaces/issues/detail?id=4238" title="Issue 4238" target="_blank">4238</a> e <a href="https://code.google.com/p/primefaces/issues/detail?id=4797" title="Issue 4797" target="_blank">4797</a>. Engraçado que mesmo com várias pessoas relatando o problema o time do PrimeFaces marcou ambos issues como “Não foi possível replicar”. Segundo um dos observadores o problema foi resolvido na versão 3.5.7, mas, não pude comprovar.</p>
<p>O ponto onde acontece o erro é o mesmo do caso descrito acima, assim, o log é semelhante e só o que muda é a causa raiz do problema. No item anterior, o motivo do NullPointer é que o parâmetro com o id da coluna redimensionada não é enviado para o servidor, já no caso das colunas dinâmicas, mesmo quando o id é enviado o PrimeFaces não consegue encontrar a coluna correspondente. O método que é usado para buscar a coluna pelo id é o <code>DataTable.findColumn(String clinetId)</code> o qual só procura por colunas simples e desconsidera as dinâmicas.</p>
<p>No meu caso, não era tão importante que o objeto Column fosse achado e que o seu campo width fosse setado pois o width usado na minha tela fica armazenado num outro objeto específico do meu sistema. Por isso minha solução foi apenas sobrescrever a classe que processa o evento resize do dataTable (org.primefaces.component.datatable.feature.ResizableColumnsFeature), mas especificamente o método decode:</p>
<pre><code>@Override
<span class="keyword">public</span> <span class="literal">void</span> decode(FacesContext context, DataTable table) {
    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; <span class="keyword">params</span> = FacesContext<span class="built_in">.</span>getCurrentInstance()<span class="built_in">.</span>getExternalContext()<span class="built_in">.</span>getRequestParameterMap();
    <span class="built_in">String</span> clientId = table<span class="built_in">.</span>getClientId();

    <span class="built_in">String</span> columnId = <span class="keyword">params</span><span class="built_in">.</span>get(clientId + <span class="string">"_columnId"</span>);
    <span class="built_in">String</span> width = <span class="keyword">params</span><span class="built_in">.</span>get(clientId + <span class="string">"_width"</span>);
    Column column = table<span class="built_in">.</span>findColumn(columnId);

    <span class="keyword">if</span>(column != <span class="built_in">null</span>){ <span class="comment">// adicionei esse if para evitar a NullPointerException </span>
        column<span class="built_in">.</span>setWidth(<span class="built_in">Integer</span><span class="built_in">.</span>parseInt(width));
    }
}
</code></pre><p>Dessa forma o evento colResize pode ser invocado e é através dele que resolvo meu problema. Talvez o código seja difícil de aplicar em outro sistema, mas, de toda forma vou deixar aqui pelo menos para você ter uma idéia de como fiz e poder adaptar a solução:</p>
<pre><code>public void onResizeColumn<span class="params">(ColumnResizeEvent event)</span> {
    <span class="keyword">if</span> <span class="params">(event.getColumn<span class="params">()</span> == null)</span> {
        String index = getColumnIndex<span class="params">(event)</span>;
        DynaColumn dynaColumn = this.getColumns<span class="params">()</span>.get<span class="params">(Integer.parseInt<span class="params">(index)</span>)</span>;<span class="comment">//getColumns() é a lista que uso para gerar as colunas dinâmicas</span>
        dynaColumn.setWidth<span class="params">(event.getWidth<span class="params">()</span>)</span>;<span class="comment">//DynaColumn é um objeto específico do meu sistema</span>
    }
}

private String getColumnIndex<span class="params">(ColumnResizeEvent event)</span> {
    String columnId = FacesContext.getCurrentInstance<span class="params">()</span>.getExternalContext<span class="params">()</span>.getRequestParameterMap<span class="params">()</span>.get<span class="params">(event.getComponent<span class="params">()</span>.getClientId<span class="params">()</span> + <span class="string">"_columnId"</span>)</span>;
    String[] columnIdSplited = columnId.split<span class="params">(<span class="string">":"</span>)</span>;
    return columnIdSplited[columnIdSplited.length - <span class="number">1</span>];
}
</code></pre><p>Na minha página JSF uso o campo DynaColumn.width para setar o tamanho da coluna mesmo que o objeto Column do PrimeFaces não tenha sido atualizado.</p>
<pre><code><span class="xml"><span class="tag">&lt;<span class="title">p:dataTable</span> <span class="attribute">resizableColumns</span>=<span class="value">"true"</span>&gt;</span>
       <span class="comment">&lt;!-- your code --&gt;</span>
    <span class="tag">&lt;<span class="title">p:columns</span> <span class="attribute">value</span>=<span class="value">"#</span></span></span><span class="expression">{<span class="variable">viewManager.columns</span>}</span><span class="xml"><span class="tag"><span class="value">"</span> <span class="attribute">var</span>=<span class="value">"dynaColumn"</span>&gt;</span>
           <span class="comment">&lt;!-- your code --&gt;</span>
    <span class="tag">&lt;/<span class="title">p:columns</span>&gt;</span>
<span class="tag">&lt;/ <span class="attribute">p:</span> <span class="attribute">dataTable</span>&gt;</span>

<span class="tag">&lt;<span class="title">ui:repeat</span> <span class="attribute">var</span>=<span class="value">"dynaColumn"</span> <span class="attribute">value</span>=<span class="value">"#</span></span></span><span class="expression">{<span class="variable">viewManager.columns</span>}</span><span class="xml"><span class="tag"><span class="value">"</span> <span class="attribute">varStatus</span>=<span class="value">"status"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined">
        var columnWidth = #</span></span><span class="expression">{<span class="variable">dynaColumn.width</span>}</span><span class="xml"><span class="actionscript">;
        <span class="keyword">if</span>(columnWidth &gt; <span class="number">0</span>)</span></span><span class="expression">{
            $('[<span class="variable">id</span>=<span class="string">"idDoDataTable:dynamicColumns:#{status.index}"</span>]')<span class="variable">.</span>
                <span class="variable">children</span>('<span class="variable">.ui-dt-c</span>')<span class="variable">.css</span>('<span class="variable">width</span>',<span class="variable">columnWidth</span>);
        }</span><span class="xml"><span class="undefined">
    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>                
<span class="tag">&lt;/<span class="title">ui:repeat</span>&gt;</span></span>
</code></pre><p>A issue <a href="https://code.google.com/p/primefaces/issues/detail?id=4238" title="Issue 4238" target="_blank">4238</a> propõe uma outra forma de contornar o problema, além disso, outras soluções possíveis seriam ajustar o método ResizableColumnsFeature.decode para procurar a coluna da maneira certa ou então no onResize setar o objeto Column ao invés de um objeto próprio do sistema. Caso alguma dessas correções seja implementada não seria necessário o javascript para ajustar o width das colunas na página JSF o que simplificaria a solução. No meu caso específico há um requisito de negócio que me forçou a fazer da forma aqui apresentada.</p>
<p><strong>3 - Evento colReorder é executado para qualquer chamada ajax e não apenas na reordenação de colunas</strong></p>
<p>Para simular esse erro basta apenas ter um dataTable draggable e fazer qualquer chamada ajax na tela. Encontrei o ticket <a href="https://code.google.com/p/primefaces/issues/detail?id=4985" title="Issue 4985" target="_blank">4985</a> no issue tracker do PrimeFaces que aborda o problema. O mesmo foi marcado como “Não será corrigido”, então, acredito que ainda aconteça em qualquer versão.</p>
<p>Para resolver o problema sobrescrevi a classe org.primefaces.component.datatable.feature.DraggableColumnsFeature para ajustar o método shouldDecode:</p>
<pre><code><span class="annotation">@Override</span>
<span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">shouldDecode</span><span class="params">(FacesContext context, DataTable table)</span> </span>{
  <span class="keyword">return</span> table.isDraggableColumns() &amp;&amp; <span class="keyword">this</span>.isDragRequest(context);
}

<span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isDragRequest</span><span class="params">(FacesContext context)</span> </span>{
  String eventName =  context.getExternalContext().getRequestParameterMap().get(<span class="string">"javax.faces.behavior.event"</span>);

  <span class="keyword">if</span>(<span class="string">"colReorder"</span>.equals(eventName)){
    <span class="keyword">return</span> <span class="keyword">true</span>;
  }

  <span class="keyword">return</span> <span class="keyword">false</span>;
}
</code></pre><p>Dessa forma, o evento colReorder agora será chamado no momento apropriado.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Vou deixar aqui soluções alternativas para alguns bugs do PrimeFaces quando se usa dataTable com as features resizable ou draggable. Alguns desses bugs já foram corrigidos, mas, se por algum motivo você assim como eu trabalha com alguma versão do PrimeFaces que contém o erro e não pode atualizá-la será de grande ajuda.</p>]]>
    
    </summary>
    
      <category term="DataTable" scheme="http://marlonpatrick.info/tags/DataTable/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/tags/JSF/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/tags/PrimeFaces/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/categories/JSF/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/categories/JSF/PrimeFaces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EJB 3.1: Stateless Session Beans and reinjection dependencies]]></title>
    <link href="http://marlonpatrick.info/en/2013/09/04/ejb-3-dot-1-stateless-session-beans-and-dependencies-reinjection/"/>
    <id>http://marlonpatrick.info/en/2013/09/04/ejb-3-dot-1-stateless-session-beans-and-dependencies-reinjection/</id>
    <published>2013-09-05T01:50:00.000Z</published>
    <updated>2015-08-02T18:12:34.115Z</updated>
    <content type="html"><![CDATA[<p>When you start working with EJB one of the first things to learn is about the different types of beans, which at 3.1 specification are: Stateful Session Beans (SFSB), Stateless Session Beans (SLSB), Singleton Sessions Beans and Message-Drive Beans. With this comes one of the most common questions: “What is the difference between Stateful and Stateless beans?”. Well, this post is not one to explain these differences, if you need that follows a good <a target="_ blank" href="http://www.theserverside.com/tutorial/Which-EJB-to-use-Stateful-stateless-and-singleton-session-beans-compared">link</a>.</p>
<a id="more"></a>
<p>But to my post need to make sense to put the standard response:. “SFSBs preserve the state even if they occur several calls methods in the bean as the container ensures that the customer will always be serviced by the same instance. Already SLSBs not preserve state because, for each method call the customer makes it can be serviced by a different instance.”</p>
<p>However, with the advent of CDI and its powerful dependency injection mechanism that changes a bit, because even a SLSB can have a “pseudo conversational state” when using this feature. Most developers (including me until this afternoon) believes that the injection of dependencies for an EJB happens only during instance creation and thus assume things like, “I can not inject a managed bean @SessionScoped in an SLSB, for as I have no guarantee of being always attended by the same instance I can get one that has the managed bean to another session”.</p>
<p>In fact it is not so, I found it today and if he knew me before would have avoided big headache, so I decided to share here. The EJB 3.1 specification on page 74 item 4.3.2 says the following:</p>
<blockquote>
<p>If a session bean makes use of dependency injection, the container injects these references after the bean instance is created, and before any business methods are invoked on the bean instance.</p>
</blockquote>
<p>Ie the dependency injection is done after creating the bean instance and also before each call of a business method. This was very useful for me, as was already racking their brains on how to keep the EntityManager to inject in my EJBs (through Seam Managed Persistence Context my EntityManager is a @ConversationScoped) according to the EJB client context. As the container reinjected dependencies before each method call actually I do not even need to have worried about it.</p>
<p>Somehow, this definition can give SLSBs the ability to have a “conversational state”. For example, if you inject in a SLSB a bean with session scope (@SessionScoped), regardless of which pool instance process your request the bean is session-scoped always according to the current client session. In other words, there is no possibility of a SLSB have a session bean another client. This allows a SLSB receive the user logged in as an instance field through @Inject without causing any problem if two users use the same instance of SLSB alternately. For example:</p>
<pre><code><span class="keyword">@Stateless</span>
<span class="keyword">public</span> <span class="keyword">class</span> StatelessSessionBean{
    <span class="keyword">@Inject</span>
    <span class="keyword">@LoggedInUser</span>
    <span class="keyword">protected</span> User loggedInUser;<span class="comment">//@SessionScoped</span>

    <span class="keyword">public</span> <span class="keyword">void</span> test(){
        System.<span class="keyword">out</span>.println(<span class="string">"ejb:"</span>+<span class="keyword">this</span>);
        System.<span class="keyword">out</span>.println(<span class="string">"user:"</span>+<span class="keyword">this</span>.loggedInUser);
    }
}
</code></pre><p>Then the result of several calls the method “test” by different users is as follows:</p>
<pre><code>User <span class="number">1</span> invoke
<span class="number">17</span>:<span class="number">02</span>:<span class="number">20</span>,<span class="number">800</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">5</span>) ejb:StatelessSessionBean@<span class="number">406189</span>
<span class="number">17</span>:<span class="number">02</span>:<span class="number">20</span>,<span class="number">801</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">5</span>) user:User <span class="number">1</span>

User <span class="number">2</span> invoke
<span class="number">17</span>:<span class="number">02</span>:<span class="number">56</span>,<span class="number">227</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) ejb:StatelessSessionBean@<span class="number">406189</span>
<span class="number">17</span>:<span class="number">02</span>:<span class="number">56</span>,<span class="number">228</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) user:User <span class="number">2</span>

User <span class="number">2</span> invoke
<span class="number">17</span>:<span class="number">03</span>:<span class="number">24</span>,<span class="number">376</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) ejb:StatelessSessionBean@<span class="number">406189</span>
<span class="number">17</span>:<span class="number">03</span>:<span class="number">24</span>,<span class="number">378</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) user:User <span class="number">2</span>

User <span class="number">1</span> invoke
<span class="number">17</span>:<span class="number">03</span>:<span class="number">24</span>,<span class="number">517</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">6</span>) ejb:StatelessSessionBean@<span class="number">1</span>c05227
<span class="number">17</span>:<span class="number">03</span>:<span class="number">24</span>,<span class="number">518</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">6</span>) user:User <span class="number">1</span>

User <span class="number">1</span> invoke
<span class="number">17</span>:<span class="number">04</span>:<span class="number">24</span>,<span class="number">045</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">1</span>) ejb:StatelessSessionBean@<span class="number">406189</span>
<span class="number">17</span>:<span class="number">04</span>:<span class="number">24</span>,<span class="number">047</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">1</span>) user:User <span class="number">1</span>

User <span class="number">2</span> invoke
<span class="number">17</span>:<span class="number">04</span>:<span class="number">24</span>,<span class="number">179</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) ejb:StatelessSessionBean@<span class="number">1</span>c05227
<span class="number">17</span>:<span class="number">04</span>:<span class="number">24</span>,<span class="number">179</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) user:User <span class="number">2</span>
</code></pre><p>Note that even being serviced by the same instance, the field “loggedInUser” varies correctly according to the user that invoked the method.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>When you start working with EJB one of the first things to learn is about the different types of beans, which at 3.1 specification are: Stateful Session Beans (SFSB), Stateless Session Beans (SLSB), Singleton Sessions Beans and Message-Drive Beans. With this comes one of the most common questions: “What is the difference between Stateful and Stateless beans?”. Well, this post is not one to explain these differences, if you need that follows a good <a target = "_ blank" href="http://www.theserverside.com/tutorial/Which-EJB-to-use-Stateful-stateless-and-singleton-session-beans-compared">link</a>.</p>]]>
    
    </summary>
    
      <category term="CDI" scheme="http://marlonpatrick.info/tags/CDI/"/>
    
      <category term="Dependency Injection" scheme="http://marlonpatrick.info/tags/Dependency-Injection/"/>
    
      <category term="Stateless Session Bean" scheme="http://marlonpatrick.info/tags/Stateless-Session-Bean/"/>
    
      <category term="EJB" scheme="http://marlonpatrick.info/categories/EJB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EJB 3.1: Stateless Session Beans e a reinjeção de dependências]]></title>
    <link href="http://marlonpatrick.info/pt-br/2013/09/04/ejb-3-dot-1-stateless-session-beans-e-a-reinjecao-de-dependencias/"/>
    <id>http://marlonpatrick.info/pt-br/2013/09/04/ejb-3-dot-1-stateless-session-beans-e-a-reinjecao-de-dependencias/</id>
    <published>2013-09-05T01:50:00.000Z</published>
    <updated>2015-08-02T18:05:21.722Z</updated>
    <content type="html"><![CDATA[<p>Quando se começa a trabalhar com EJB uma das primeiras coisas a se aprender é sobre os diferentes tipos de beans, que na especificação 3.1 são: Stateful Session Beans (SFSB), Stateless Session Beans (SLSB), Singleton Sessions Beans e os Message-Drive Beans. Com isso vem uma das dúvidas mais comuns: “Qual a diferença entre beans Stateful e Stateless?”. Bem, esse post não é mais um para explicar essas diferenças, se você precisa disso segue um bom <a target="_blank" href="http://www.theserverside.com/tutorial/Which-EJB-to-use-Stateful-stateless-and-singleton-session-beans-compared">link</a>.</p>
<a id="more"></a>
<p>Mas, para o meu post fazer sentido preciso colocar a resposta padrão: “SFSBs preservam o estado mesmo que ocorram várias chamadas de métodos no bean, pois, o container garante que o cliente vai ser sempre atendido pela mesma instância. Já os SLSBs não preservam estado, pois, para cada chamada de método que o cliente faz ele pode ser atendido por uma instância diferente.”</p>
<p>Porém, com o advento do CDI e o seu poderoso mecanismo de injeção de dependências isso muda um pouco, pois, mesmo um SLSB pode ter um “pseudo conversational state” quando usa esse recurso. A maioria dos desenvolvedores (inclusive eu até hoje a tarde) acredita que a injeção de dependências de um EJB acontece apenas durante a criação da instância e com isso supõem coisas como: “Não posso injetar um managed bean @SessionScoped num SLSB, pois, como não tenho garantia de ser atendido sempre pela mesma instância posso obter uma que tem o managed bean de uma outra sessão”.</p>
<p>Na verdade não é bem assim, descobri isso hoje e se soubesse antes teria me evitado uma grande dor de cabeça, por isso resolvi compartilhar aqui. A especificação EJB 3.1 na página 74 item 4.3.2 fala o seguinte:</p>
<blockquote>
<p>If a session bean makes use of dependency injection, the container injects these references after the bean instance is created, and before any business methods are invoked on the bean instance.</p>
</blockquote>
<p>Ou seja, a injeção de dependências é feita depois de criar a instância do bean e também antes de cada chamada de um método de negócio. Isso foi de grande valia para mim, pois, já estava quebrando a cabeça em como manteria o EntityManager que injeto nos meus EJBs (através do Seam Managed Persistence Context meu EntityManager é um @ConversationScoped) de acordo com o contexto do cliente do EJB. Como o container reinjeta as dependências antes de cada chamada de método na verdade eu nem precisava ter me preocupado com isso.</p>
<p>De alguma forma, essa definição pode dar aos SLSBs a capacidade de ter um “estado de conversação”. Por exemplo, se você injetar em um SLSB um bean com escopo de sessão (@SessionScoped), independentemente de qual instância do pool processar sua solicitação o bean com escopo de sessão sempre estará de acordo com a sessão do cliente atual. Em outras palavras, não existe a possibilidade de um SLSB ter um bean de sessão de outro cliente. Isso permite que uma SLSB receba o usuário logado como um campo de instância através de @Inject sem causar nenhum problema caso dois usuários usem a mesma instância do SLSB alternadamente. Por exemplo:</p>
<pre><code><span class="keyword">@Stateless</span>
<span class="keyword">public</span> <span class="keyword">class</span> StatelessSessionBean{
    <span class="keyword">@Inject</span>
    <span class="keyword">@LoggedInUser</span>
    <span class="keyword">protected</span> User loggedInUser;<span class="comment">//@SessionScoped</span>

    <span class="keyword">public</span> <span class="keyword">void</span> test(){
        System.<span class="keyword">out</span>.println(<span class="string">"ejb:"</span>+<span class="keyword">this</span>);
        System.<span class="keyword">out</span>.println(<span class="string">"user:"</span>+<span class="keyword">this</span>.loggedInUser);
    }
}
</code></pre><p>Então o resultado de várias chamadas do método “test” por usuários diferentes é a seguinte:</p>
<pre><code>User <span class="number">1</span> invoke
<span class="number">17</span>:<span class="number">02</span>:<span class="number">20</span>,<span class="number">800</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">5</span>) ejb:StatelessSessionBean@<span class="number">406189</span>
<span class="number">17</span>:<span class="number">02</span>:<span class="number">20</span>,<span class="number">801</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">5</span>) user:User <span class="number">1</span>

User <span class="number">2</span> invoke
<span class="number">17</span>:<span class="number">02</span>:<span class="number">56</span>,<span class="number">227</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) ejb:StatelessSessionBean@<span class="number">406189</span>
<span class="number">17</span>:<span class="number">02</span>:<span class="number">56</span>,<span class="number">228</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) user:User <span class="number">2</span>

User <span class="number">2</span> invoke
<span class="number">17</span>:<span class="number">03</span>:<span class="number">24</span>,<span class="number">376</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) ejb:StatelessSessionBean@<span class="number">406189</span>
<span class="number">17</span>:<span class="number">03</span>:<span class="number">24</span>,<span class="number">378</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) user:User <span class="number">2</span>

User <span class="number">1</span> invoke
<span class="number">17</span>:<span class="number">03</span>:<span class="number">24</span>,<span class="number">517</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">6</span>) ejb:StatelessSessionBean@<span class="number">1</span>c05227
<span class="number">17</span>:<span class="number">03</span>:<span class="number">24</span>,<span class="number">518</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">6</span>) user:User <span class="number">1</span>

User <span class="number">1</span> invoke
<span class="number">17</span>:<span class="number">04</span>:<span class="number">24</span>,<span class="number">045</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">1</span>) ejb:StatelessSessionBean@<span class="number">406189</span>
<span class="number">17</span>:<span class="number">04</span>:<span class="number">24</span>,<span class="number">047</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">1</span>) user:User <span class="number">1</span>

User <span class="number">2</span> invoke
<span class="number">17</span>:<span class="number">04</span>:<span class="number">24</span>,<span class="number">179</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) ejb:StatelessSessionBean@<span class="number">1</span>c05227
<span class="number">17</span>:<span class="number">04</span>:<span class="number">24</span>,<span class="number">179</span> INFO  [<span class="built_in">stdout</span>] (http--<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">8080</span>-<span class="number">8</span>) user:User <span class="number">2</span>
</code></pre><p>Perceba que mesmo sendo atendido pela mesma instância, o campo “loggedInUser” varia corretamente de acordo com o usuário que invocou o método.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Quando se começa a trabalhar com EJB uma das primeiras coisas a se aprender é sobre os diferentes tipos de beans, que na especificação 3.1 são: Stateful Session Beans (SFSB), Stateless Session Beans (SLSB), Singleton Sessions Beans e os Message-Drive Beans. Com isso vem uma das dúvidas mais comuns: “Qual a diferença entre beans Stateful e Stateless?”. Bem, esse post não é mais um para explicar essas diferenças, se você precisa disso segue um bom <a target="_blank" href="http://www.theserverside.com/tutorial/Which-EJB-to-use-Stateful-stateless-and-singleton-session-beans-compared">link</a>.</p>]]>
    
    </summary>
    
      <category term="Injeção de dependências" scheme="http://marlonpatrick.info/tags/Injecao-de-dependencias/"/>
    
      <category term="Stateless Session Bean" scheme="http://marlonpatrick.info/tags/Stateless-Session-Bean/"/>
    
      <category term="EJB" scheme="http://marlonpatrick.info/categories/EJB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PrimeFaces: Menu Dinâmico e o erro Cannot remove the same component twice]]></title>
    <link href="http://marlonpatrick.info/pt-br/2013/01/24/primefaces-menu-dinamico-e-o-erro-cannot-remove-the-same-component-twice/"/>
    <id>http://marlonpatrick.info/pt-br/2013/01/24/primefaces-menu-dinamico-e-o-erro-cannot-remove-the-same-component-twice/</id>
    <published>2013-01-25T01:39:00.000Z</published>
    <updated>2015-08-03T03:26:09.217Z</updated>
    <content type="html"><![CDATA[<p>Se você está usando o componente MenuBar do PrimeFaces para geração de menus dinâmicos pode ter se deparado com o erro:<strong>Cannot remove the same component twice</strong>. Esse erro ocorre pelo mesmo motivo explicado no post <a href="/blog/2013/01/24/primefaces-menu-dinamico-e-a-inofensiva-mensagem-unable-to-find-component-dot-dot-dot">PrimeFaces:Menu Dinâmico E a Inofensiva Mensagem Unable to Find Component…</a>.</p>
<a id="more"></a>
<p>A diferença é que a mensagem “Unable to find component…” é apenas um warnning no log do servidor que num caso muito específico pode representar um problema de performance, já a mensagem “Cannot remove the same component twice” é um erro de fato que impede a renderização da tela JSF. No meu caso, o erro ocorre quando um Validator JSF lança uma ValidatorException numa tela que tem um menu dinâmico (PrimeFaces MenuBar).</p>
<p>Outra coisa importante é que o erro ocorre na versão 3.4.1 do PrimeFaces(não cheguei a verificar outras versões) em conjunto com a implementação JSF Mojarra 2.1.9 ou superior. Caso a versão do Mojarra seja menor que a 2.1.9 ao invés de ocorrer erro é jogado no log do servidor a mensagem “Unable to find component…”.</p>
<p>A solução colocada no post referido anteriormente também serve para esse caso e lá explico melhor o porque do problema. É só clicar <a href="/blog/2013/01/24/primefaces-menu-dinamico-e-a-inofensiva-mensagem-unable-to-find-component-dot-dot-dot">aqui</a> e dá uma conferida. Já até abri uma issue no bug tracking do PrimeFaces no seguinte <a target="_blank" href="http://code.google.com/p/primefaces/issues/detail?id=4431">link</a>. Por enquanto é isso!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Se você está usando o componente MenuBar do PrimeFaces para geração de menus dinâmicos pode ter se deparado com o erro:<strong>Cannot remove the same component twice</strong>. Esse erro ocorre pelo mesmo motivo explicado no post <a href="/blog/2013/01/24/primefaces-menu-dinamico-e-a-inofensiva-mensagem-unable-to-find-component-dot-dot-dot">PrimeFaces:Menu Dinâmico E a Inofensiva Mensagem Unable to Find Component…</a>.</p>]]>
    
    </summary>
    
      <category term="Dynamic Menu" scheme="http://marlonpatrick.info/tags/Dynamic-Menu/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/tags/JSF/"/>
    
      <category term="Menu Dinâmico" scheme="http://marlonpatrick.info/tags/Menu-Dinamico/"/>
    
      <category term="MenuBar" scheme="http://marlonpatrick.info/tags/MenuBar/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/tags/PrimeFaces/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/categories/JSF/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/categories/JSF/PrimeFaces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PrimeFaces: Dynamic Menu and the error Cannot remove the same component twice]]></title>
    <link href="http://marlonpatrick.info/en/2013/01/24/primefaces-dynamic-menu-and-the-error-cannot-remove-the-same-component-twice/"/>
    <id>http://marlonpatrick.info/en/2013/01/24/primefaces-dynamic-menu-and-the-error-cannot-remove-the-same-component-twice/</id>
    <published>2013-01-25T01:39:00.000Z</published>
    <updated>2015-08-03T03:47:10.312Z</updated>
    <content type="html"><![CDATA[<p>If you are using the MenuBar component PrimeFaces to generate dynamic menus you may have encountered the error:<strong>Can not remove the same component twice</strong>. This error occurs for the same reason explained in the post <a href="/en/2013/01/24/primefaces-dynamic-menu-and-the-harmless-menssage-unable-to-find-component-dot-dot-dot/">PrimeFaces: Dynamic Menu and harmless message Unable to Find Component … </a>.</p>
<a id="more"></a>
<p>The difference is that the “Unable to find component …” message is just a warnning the server log to a very specific case can be a performance problem, since the message “Cannot remove the same component twice” is an error fact that prevents the rendering of JSF screen. In my case, the error occurs when a JSF Validator throws a ValidatorException a screen that has a dynamic menu (PrimeFaces MenuBar).</p>
<p>Another important thing is that the error occurs in the 3.4.1 version of PrimeFaces (did not get to check other versions) in conjunction with the implementation Mojarra JSF 2.1.9 or higher. If the Mojarra version 2.1.9 is less than the error occurs instead is played on the server log the message “Unable to find component …”.</p>
<p>The solution placed in the post mentioned above also serves to this case and there explain better why the issue. Just click <a href="/en/2013/01/24/primefaces-dynamic-menu-and-the-harmless-menssage-unable-to-find-component-dot-dot-dot/">aqui</a> and gives a given. I have even opened a PrimeFaces issue in the bug tracking the following <a target="_blank" href="http://code.google.com/p/primefaces/issues/detail?id=4431">link</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you are using the MenuBar component PrimeFaces to generate dynamic menus you may have encountered the error:<strong>Can not remove the same component twice</strong>. This error occurs for the same reason explained in the post <a href="/en/2013/01/24/primefaces-dynamic-menu-and-the-harmless-menssage-unable-to-find-component-dot-dot-dot/">PrimeFaces: Dynamic Menu and harmless message Unable to Find Component … </a>.</p>]]>
    
    </summary>
    
      <category term="Dynamic Menu" scheme="http://marlonpatrick.info/tags/Dynamic-Menu/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/tags/JSF/"/>
    
      <category term="MenuBar" scheme="http://marlonpatrick.info/tags/MenuBar/"/>
    
      <category term="Mojarra" scheme="http://marlonpatrick.info/tags/Mojarra/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/tags/PrimeFaces/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/categories/JSF/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/categories/JSF/PrimeFaces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PrimeFaces: Dynamic Menu and harmless message Unable to find component ...]]></title>
    <link href="http://marlonpatrick.info/en/2013/01/24/primefaces-dynamic-menu-and-the-harmless-menssage-unable-to-find-component-dot-dot-dot/"/>
    <id>http://marlonpatrick.info/en/2013/01/24/primefaces-dynamic-menu-and-the-harmless-menssage-unable-to-find-component-dot-dot-dot/</id>
    <published>2013-01-24T15:00:00.000Z</published>
    <updated>2015-08-03T03:06:36.233Z</updated>
    <content type="html"><![CDATA[<p>I am particularly hardcore fan of PrimeFaces and one of the components I like most is to generate dynamic menus. Virtually all applications have the concept of access profile which ends up making the MenuBar component extremely useful for this type of requirement. Basically, the system will only render the menus which point to screens that the user can access.</p>
<a id="more"></a>
<p>Well, I’m using that component precisely in the above scenario with the 3.4.1 version of PrimeFaces and the implementation of JSF reference (Mojarra) in the version 2.1.7. With this combination (PrimeFaces/Mojarra) n the versions described above (believe in others as well) realized in the log my application every time performing an ajax call for each menu item generated with the dynamic MenuBar, there was a message something like this:<strong>Unable to find component with clientId ‘menuitem200’, the need to remove it</strong>.</p>
<p>Up to a certain moment nothing affected me such a message, and is probably so for 99% of cases. Now, if you like me, it fell to the remaining 1%, this message can cause a serious performance problem in ajax calls. This performance problem will only happen if you have a very large page, with many components generated as was my case.</p>
<p>Every time I made a ajax call that page the procedure performed by PrimeFaces that generated the message “Unable to find component …” came to take about 1 minute and 30 seconds to finish, which is totally impractical. It’s not that the code runs on the call was super heavy, these more than 1 minute refer only method execution that generated the messages as shown in the log below:</p>
<pre><code><span class="number">02</span>:<span class="number">40</span>:<span class="number">00</span>,<span class="number">876</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'submenu1'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">01</span>,<span class="number">298</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'submenu2'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">01</span>,<span class="number">656</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitem45'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">02</span>,<span class="number">014</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitem4'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">02</span>,<span class="number">361</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'submenu20'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.

...many others messages here...

<span class="number">02</span>:<span class="number">40</span>:<span class="number">44</span>,<span class="number">240</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitemespacobefore'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">44</span>,<span class="number">917</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'submenuuseractions'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">45</span>,<span class="number">249</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitemchangepassword'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">45</span>,<span class="number">574</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitemlogout'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
</code></pre><p>In the above example, the total time was 46 seconds. Basically what happens is that the JSF Restore View phase runs the method that restores the state of the dynamic menus, where for each menu item is done a search on the entire tree of JSF components and due to page be great takes a considerable time. The worst is that as the message itself says, “the need to remove it,” is not necessary to remove this component of the JSF tree because in fact it has already been removed.</p>
<p>In my case, what I realized is that when the dynamic menu item uses a link is not necessary that the removal PrimeFaces tries, as when the menu item uses an Action Expression, then yes, this procedure is necessary.</p>
<pre><code><span class="comment">// It is not necessary to try to remove this MenuItem therefore it uses a link</span>
MenuItem changePassword = new MenuItem<span class="params">()</span>;
changePassword.setId<span class="params">(<span class="string">"menuitemchangepassword"</span>)</span>;
changePassword.setValue<span class="params">(<span class="string">"Change Password"</span>)</span>;
changePassword.setUrl<span class="params">(<span class="string">"/user/changePassword.xhtml?faces-redirect=true"</span>)</span>;
submenuUser.getChildren<span class="params">()</span>.add<span class="params">(changePassword)</span>;

<span class="comment">//In fact it is necessary to remove the item menu to add the new object in the Restore View phase, because it uses a Action Expression</span>
MethodExpression logoutAction = factory.createMethodExpression<span class="params">(context.getELContext<span class="params">()</span>, <span class="string">"#{loginView.logout}"</span>,
                null, new Class[] {})</span>;
MenuItem logout = new MenuItem<span class="params">()</span>;
logout.setId<span class="params">(<span class="string">"menuitemlogout"</span>)</span>;
logout.setValue<span class="params">(<span class="string">"Logout"</span>)</span>;
logout.setActionExpression<span class="params">(logoutAction)</span>;
submenuUser.getChildren<span class="params">()</span>.add<span class="params">(logout)</span>;
</code></pre><p>To solve this problem I created a PhaseListener that removes the menu items that use this link unnecessary restoration phase, leaving only those who use action expression.</p>
<pre><code>public class <span class="type">RestoreDynamicActionsObserver</span> implements <span class="type">PhaseListener</span>{

    public <span class="keyword">static</span> final <span class="type">String</span> <span class="type">DYNAMIC_ACTIONS_RENDERKIT</span> = <span class="string">"HTML_BASIC"</span>;

    @<span class="type">Override</span>
    public <span class="type">PhaseId</span> getPhaseId() {
        <span class="keyword">return</span> <span class="type">PhaseId</span>.<span class="type">RESTORE_VIEW</span>;
    }

    @<span class="type">Override</span>
    public <span class="type">void</span> beforePhase(<span class="type">PhaseEvent</span> event) {

        <span class="type">ResponseStateManager</span> rsm = <span class="type">RenderKitUtils</span>.getResponseStateManager(event.getFacesContext(), <span class="type">DYNAMIC_ACTIONS_RENDERKIT</span>);

        <span class="type">HttpServletRequest</span> httpRequest = <span class="type">WebUtils</span>.getRequest();

        <span class="type">Object</span>[] rawState = (<span class="type">Object</span>[]) rsm.getState(event.getFacesContext(), httpRequest.getRequestURI().replaceFirst(httpRequest.getContextPath(), <span class="string">""</span>).split(<span class="string">"\\?"</span>)[<span class="number">0</span>]);
        <span class="keyword">if</span> (rawState == null) {
            <span class="keyword">return</span>;
        }

        <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">Object</span>&gt; state = (<span class="type">Map</span>&lt;<span class="type">String</span>,<span class="type">Object</span>&gt;) rawState[<span class="number">1</span>];

        <span class="keyword">if</span>(state == null){
            <span class="keyword">return</span>;
        }

        <span class="type">List</span>&lt;<span class="type">Object</span>&gt; savedActions = (<span class="type">List</span>&lt;<span class="type">Object</span>&gt;) state.get(<span class="type">RIConstants</span>.<span class="type">DYNAMIC_ACTIONS</span>);

        <span class="keyword">if</span>(savedActions == null){
            <span class="keyword">return</span>;
        }

        <span class="keyword">for</span> (<span class="type">Iterator</span>&lt;<span class="type">Object</span>&gt; <span class="keyword">iterator</span> = savedActions.<span class="keyword">iterator</span>(); <span class="keyword">iterator</span>.hasNext();) {
            <span class="type">Object</span> <span class="keyword">object</span> = <span class="keyword">iterator</span>.next();
            <span class="type">ComponentStruct</span> action = new <span class="type">ComponentStruct</span>();
            action.restoreState(event.getFacesContext(), <span class="keyword">object</span>); 

            //<span class="type">These</span> are the only items that use <span class="type">Action</span> <span class="type">Expression</span>, <span class="keyword">and</span> therefore should <span class="keyword">not</span> be scrambled
            <span class="keyword">if</span>(<span class="type">ComponentStruct</span>.<span class="type">ADD</span>.equals(action.action) &amp;&amp; 
                (action.clientId.equals(<span class="string">"menuitemlogout"</span>) || action.clientId.equals(<span class="string">"submenuuseractions"</span>))){
                <span class="keyword">continue</span>;
            }

            //<span class="type">Other</span> items use link, <span class="keyword">and</span> so are removed <span class="keyword">from</span> this collection
            <span class="keyword">if</span> (action.clientId.startsWith(<span class="string">"menuitem"</span>) 
                || action.clientId.startsWith(<span class="string">"submenu"</span>)) {                
                <span class="keyword">iterator</span>.remove();
            }            
        }

    }

    @<span class="type">Override</span>
    public <span class="type">void</span> afterPhase(<span class="type">PhaseEvent</span> event) {
        //
    }
}
</code></pre><p>With PhaseListener up, I let only the menu items that use Action Expression in the collection of dynamic actions to restore. In my case, I have a menu with hundreds of items, of which only 2 or 3 using action expression and thus the time spent on the restoration of dynamic shares fell sharply with that adjustment, getting unnoticeable (as it should be). This is because the PhaseListener runs before restoring leaving only what is truly necessary. Oh, another thing, the message “Unable to find component …” should also disappear from your log.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I am particularly hardcore fan of PrimeFaces and one of the components I like most is to generate dynamic menus. Virtually all applications have the concept of access profile which ends up making the MenuBar component extremely useful for this type of requirement. Basically, the system will only render the menus which point to screens that the user can access.</p>]]>
    
    </summary>
    
      <category term="Dynamic Menu" scheme="http://marlonpatrick.info/tags/Dynamic-Menu/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/tags/JSF/"/>
    
      <category term="MenuBar" scheme="http://marlonpatrick.info/tags/MenuBar/"/>
    
      <category term="Mojarra" scheme="http://marlonpatrick.info/tags/Mojarra/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/tags/PrimeFaces/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/categories/JSF/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/categories/JSF/PrimeFaces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PrimeFaces:Menu dinâmico e a inofensiva mensagem Unable to find component...]]></title>
    <link href="http://marlonpatrick.info/pt-br/2013/01/24/primefaces-menu-dinamico-e-a-inofensiva-mensagem-unable-to-find-component-dot-dot-dot/"/>
    <id>http://marlonpatrick.info/pt-br/2013/01/24/primefaces-menu-dinamico-e-a-inofensiva-mensagem-unable-to-find-component-dot-dot-dot/</id>
    <published>2013-01-24T15:00:00.000Z</published>
    <updated>2015-08-03T03:25:27.188Z</updated>
    <content type="html"><![CDATA[<p>Eu sou particularmente fã incondicional do PrimeFaces e um dos componentes que mais gosto é o de gerar menus dinâmicos. Praticamente todas as aplicações tem o conceito de perfil de acesso o que acaba tornando o componente MenuBar extremamente útil para esse tipo de requisito. Basicamente, o sistema só irá renderizar os menus o qual apontam para telas que o usuário pode acessar.</p>
<a id="more"></a>
<p>Bem, estou usando esse componente exatamente no cenário descrito acima com a versão 3.4.1 do PrimeFaces e a implementação de referência do JSF(Mojarra) na sua versão 2.1.7. Com essa combinação (PrimeFaces/Mojarra) nas versões descritas acima (acredito que em outras também) percebi no log de minha aplicação que todas as vezes que executava uma chamada ajax, para cada item do menu gerado com o MenuBar dinâmico, havia uma mensagem mais ou menos assim:<strong>Unable to find component with clientId ‘menuitem200’, no need to remove it.</strong>.</p>
<p>Até um determinado momento em nada me afetava tal mensagem, e provavelmente é assim para 99% dos casos. Agora, se você assim como eu, caiu no 1% restante, essa mensagem pode causar um sério problema de performance nas chamadas ajax. Esse problema de performance só irá acontecer se você tiver uma página muito grande, com muitos componentes gerados como foi o meu caso.</p>
<p>Toda vez que eu fazia uma chamada ajax nessa página o procedimento executado pelo PrimeFaces que gerava as mensagens “Unable to find component…” chegava a levar cerca de 1 minuto e 30 segundos para terminar, o que é totalmente inviável. Não é que o código executado na chamada era super pesado, esses mais de 1 minuto se referem apenas execução do método que gerava as mensagens como mostra o log abaixo:</p>
<pre><code><span class="number">02</span>:<span class="number">40</span>:<span class="number">00</span>,<span class="number">876</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'submenu1'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">01</span>,<span class="number">298</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'submenu2'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">01</span>,<span class="number">656</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitem45'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">02</span>,<span class="number">014</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitem4'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">02</span>,<span class="number">361</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'submenu20'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.

...muitas outras mensagens aqui...

<span class="number">02</span>:<span class="number">40</span>:<span class="number">44</span>,<span class="number">240</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitemespacobefore'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">44</span>,<span class="number">917</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'submenuuseractions'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">45</span>,<span class="number">249</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitemchangepassword'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
<span class="number">02</span>:<span class="number">40</span>:<span class="number">45</span>,<span class="number">574</span> INFO  [stdout] (http--<span class="number">0.0</span>.<span class="number">0.0</span>-<span class="number">8080</span>-<span class="number">4</span>) Unable <span class="keyword">to</span> find component <span class="keyword">with</span> clientId <span class="string">'menuitemlogout'</span>, <span class="literal">no</span> need <span class="keyword">to</span> remove <span class="literal">it</span>.
</code></pre><p>No exemplo acima, o tempo total foi de 46 segundos. Basicamente o que acontece é que na fase JSF Restore View é executado o método que restaura o estado dos menus dinâmicos, onde, para cada item do menu é feito uma busca em toda a árvore de componentes do JSF e devido a página ser grande leva um tempo considerável. O pior é que, como a própria mensagem diz, “no need to remove it”, não é necessário remover tal componente da árvore JSF porque na verdade ele já foi removido.</p>
<p>No meu caso, o que percebi é que quando o item do menu dinâmico usa um link não é necessário essa remoção que o PrimeFaces tenta fazer, já quando o item do menu usa uma Action Expression, aí sim, esse procedimento é necessário.</p>
<pre><code><span class="comment">//Não é necessário tentar remover esse MenuItem, pois, ele usa um link</span>
MenuItem changePassword = new MenuItem<span class="params">()</span>;
changePassword.setId<span class="params">(<span class="string">"menuitemchangepassword"</span>)</span>;
changePassword.setValue<span class="params">(<span class="string">"Mudar Senha"</span>)</span>;
changePassword.setUrl<span class="params">(<span class="string">"/user/changePassword.xhtml?faces-redirect=true"</span>)</span>;
submenuUser.getChildren<span class="params">()</span>.add<span class="params">(changePassword)</span>;

<span class="comment">//De fato é preciso remover o menu item para adicionar o novo objeto na fase de Restore View, pois, ele usa uma Action Expression</span>
MethodExpression logoutAction = factory.createMethodExpression<span class="params">(context.getELContext<span class="params">()</span>, <span class="string">"#{loginView.logout}"</span>,
                null, new Class[] {})</span>;
MenuItem logout = new MenuItem<span class="params">()</span>;
logout.setId<span class="params">(<span class="string">"menuitemlogout"</span>)</span>;
logout.setValue<span class="params">(<span class="string">"Sair"</span>)</span>;
logout.setActionExpression<span class="params">(logoutAction)</span>;
submenuUser.getChildren<span class="params">()</span>.add<span class="params">(logout)</span>;
</code></pre><p>Pra resolver esse problema criei um PhaseListener que retira os itens de menu que usam link dessa fase de restauração desnecessária, deixando apenas os que usam action expression.</p>
<pre><code>public class <span class="type">RestoreDynamicActionsObserver</span> implements <span class="type">PhaseListener</span>{

    public <span class="keyword">static</span> final <span class="type">String</span> <span class="type">DYNAMIC_ACTIONS_RENDERKIT</span> = <span class="string">"HTML_BASIC"</span>;

    @<span class="type">Override</span>
    public <span class="type">PhaseId</span> getPhaseId() {
        <span class="keyword">return</span> <span class="type">PhaseId</span>.<span class="type">RESTORE_VIEW</span>;
    }

    @<span class="type">Override</span>
    public <span class="type">void</span> beforePhase(<span class="type">PhaseEvent</span> event) {

        <span class="type">ResponseStateManager</span> rsm = <span class="type">RenderKitUtils</span>.getResponseStateManager(event.getFacesContext(), <span class="type">DYNAMIC_ACTIONS_RENDERKIT</span>);

        <span class="type">HttpServletRequest</span> httpRequest = <span class="type">WebUtils</span>.getRequest();

        <span class="type">Object</span>[] rawState = (<span class="type">Object</span>[]) rsm.getState(event.getFacesContext(), httpRequest.getRequestURI().replaceFirst(httpRequest.getContextPath(), <span class="string">""</span>).split(<span class="string">"\\?"</span>)[<span class="number">0</span>]);
        <span class="keyword">if</span> (rawState == null) {
            <span class="keyword">return</span>;
        }

        <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">Object</span>&gt; state = (<span class="type">Map</span>&lt;<span class="type">String</span>,<span class="type">Object</span>&gt;) rawState[<span class="number">1</span>];

        <span class="keyword">if</span>(state == null){
            <span class="keyword">return</span>;
        }

        <span class="type">List</span>&lt;<span class="type">Object</span>&gt; savedActions = (<span class="type">List</span>&lt;<span class="type">Object</span>&gt;) state.get(<span class="type">RIConstants</span>.<span class="type">DYNAMIC_ACTIONS</span>);

        <span class="keyword">if</span>(savedActions == null){
            <span class="keyword">return</span>;
        }

        <span class="keyword">for</span> (<span class="type">Iterator</span>&lt;<span class="type">Object</span>&gt; <span class="keyword">iterator</span> = savedActions.<span class="keyword">iterator</span>(); <span class="keyword">iterator</span>.hasNext();) {
            <span class="type">Object</span> <span class="keyword">object</span> = <span class="keyword">iterator</span>.next();
            <span class="type">ComponentStruct</span> action = new <span class="type">ComponentStruct</span>();
            action.restoreState(event.getFacesContext(), <span class="keyword">object</span>); 

            //<span class="type">Esses</span> são os únicos itens que usam <span class="type">Action</span> <span class="type">Expression</span>, e portanto, não devem ser mexidos
            <span class="keyword">if</span>(<span class="type">ComponentStruct</span>.<span class="type">ADD</span>.equals(action.action) &amp;&amp; 
                (action.clientId.equals(<span class="string">"menuitemlogout"</span>) || action.clientId.equals(<span class="string">"submenuuseractions"</span>))){
                <span class="keyword">continue</span>;
            }

            //<span class="type">Os</span> demais itens usam link, e por isso, são retirados dessa coleção
            <span class="keyword">if</span> (action.clientId.startsWith(<span class="string">"menuitem"</span>) 
                || action.clientId.startsWith(<span class="string">"submenu"</span>)) {                
                <span class="keyword">iterator</span>.remove();
            }            
        }

    }

    @<span class="type">Override</span>
    public <span class="type">void</span> afterPhase(<span class="type">PhaseEvent</span> event) {
        //
    }
}
</code></pre><p>Com o PhaseListener acima, eu deixo apenas os itens de menu que usam Action Expression na coleção de ações dinâmicas a restaurar. No meu caso, tenho um menu com centenas de itens, dos quais, apenas 2 ou 3 usam action expression e com isso o tempo gasto na restauração das ações dinâmicas caiu bruscamente com  esse ajuste, ficando imperceptível(como deve ser). Isso acontece porque o PhaseListener executa antes da restauração deixando apenas o que realmente é necessário. Ah, outra coisa, as mensagens “Unable to find component…” também devem sumir do seu log. É isso.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Eu sou particularmente fã incondicional do PrimeFaces e um dos componentes que mais gosto é o de gerar menus dinâmicos. Praticamente todas as aplicações tem o conceito de perfil de acesso o que acaba tornando o componente MenuBar extremamente útil para esse tipo de requisito. Basicamente, o sistema só irá renderizar os menus o qual apontam para telas que o usuário pode acessar.</p>]]>
    
    </summary>
    
      <category term="Dynamic Menu" scheme="http://marlonpatrick.info/tags/Dynamic-Menu/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/tags/JSF/"/>
    
      <category term="Menu Dinâmico" scheme="http://marlonpatrick.info/tags/Menu-Dinamico/"/>
    
      <category term="MenuBar" scheme="http://marlonpatrick.info/tags/MenuBar/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/tags/PrimeFaces/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/categories/JSF/"/>
    
      <category term="PrimeFaces" scheme="http://marlonpatrick.info/categories/JSF/PrimeFaces/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Seam Persistence: Configurando o FlushMode]]></title>
    <link href="http://marlonpatrick.info/pt-br/2012/11/02/configurando-o-flushmode-no-seam-persistence/"/>
    <id>http://marlonpatrick.info/pt-br/2012/11/02/configurando-o-flushmode-no-seam-persistence/</id>
    <published>2012-11-02T23:19:00.000Z</published>
    <updated>2015-08-02T17:49:49.129Z</updated>
    <content type="html"><![CDATA[<p>Uma das grandes vantagens de usar o Seam Persistence é o Seam Managed Persistence Context (SMPC) que permite um melhor gerenciamento do EntityManager na sua aplicação. Com o SMPC é possível colocar o EntityManager num escopo CDI o que pode facilitar bastante a vida de nós desenvolvedores ajudando a minimizar bruscamente erros como o temido LazyInitializationException.</p>
<a id="more"></a>
<p>Porém, uma das coisas que tive dificuldade de encontrar na documentação do Seam Persistence foi como definir o FlushMode do meu EntityManager por isso resolvi fazer esse post. Dando uma fuçada no código do Seam, encontrei a classe FlushModeManager e sua implementação padrão FlushModeManagerImpl, que justamente são usadas para definir o flushMode do EntityManager gerenciado pelo SMPC.</p>
<p>Por padrão, o Seam Persistence define o flushMode como AUTO. O problema do flushMode configurado como AUTO é que o desenvolvedor não tem domínio sobre o momento que o ORM irá sincronizar os objetos em memória com a base de dados, o que muitas vezes, pode gerar resultados inesperados. Se você concorda comigo e deseja mudar o flushMode usado pelo SMPC é só copiar o código abaixo:</p>
<pre><code><span class="annotation">@Produces</span>
<span class="annotation">@ApplicationScoped</span>
<span class="keyword">protected</span> <span class="function">FlushModeManager <span class="title">createDefaultFlushModeManager</span><span class="params">()</span> </span>{
    FlushModeManagerImpl flushModeManager = <span class="keyword">new</span> FlushModeManagerImpl();
    flushModeManager.setFlushModeType(FlushModeType.COMMIT);
    <span class="keyword">return</span> flushModeManager;
}
</code></pre><p>Esse método irá produzir um bean CDI do tipo FlushModeManager que será usado pelo SMPC para definir o flushMode do EntityManager que ele irá gerenciar. O novo bean irá substituir o bean padrão criado pelo Seam Persistence, e com ele, você pode definir o flushMode de três maneiras: AUTO, COMMIT e MANUAL.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Uma das grandes vantagens de usar o Seam Persistence é o Seam Managed Persistence Context (SMPC) que permite um melhor gerenciamento do EntityManager na sua aplicação. Com o SMPC é possível colocar o EntityManager num escopo CDI o que pode facilitar bastante a vida de nós desenvolvedores ajudando a minimizar bruscamente erros como o temido LazyInitializationException.</p>]]>
    
    </summary>
    
      <category term="Seam Managed Persistence Context" scheme="http://marlonpatrick.info/tags/Seam-Managed-Persistence-Context/"/>
    
      <category term="Seam Persistence" scheme="http://marlonpatrick.info/tags/Seam-Persistence/"/>
    
      <category term="JBoss Seam" scheme="http://marlonpatrick.info/categories/JBoss-Seam/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Seam Persistence: Configuring FlushMode]]></title>
    <link href="http://marlonpatrick.info/en/2012/11/02/configuring-flushmode-seam-persistence/"/>
    <id>http://marlonpatrick.info/en/2012/11/02/configuring-flushmode-seam-persistence/</id>
    <published>2012-11-02T23:19:00.000Z</published>
    <updated>2015-08-02T17:50:41.447Z</updated>
    <content type="html"><![CDATA[<p>One of the great advantages of using Seam Persistence is the Seam Managed Persistence Context (SMPC) which allows better management of the EntityManager in your application. With the SMPC is possible to place the EntityManager in a CDI scope which can greatly ease the life of developers helping us to sharply minimize errors as the dreaded LazyInitializationException.</p>
<a id="more"></a>
<p>But one of the things I had trouble finding in the Seam Persistence documentation was setting the FlushMode of my EntityManager so I decided to make this post. Giving poke around in Seam code, I found the FlushModeManager class and its standard FlushModeManagerImpl implementation, which are just used to set the flushMode in the EntityManager managed by SMPC.</p>
<p>By default, Seam Persistence defines flushMode to AUTO. With flushMode the problem set to AUTO is that the developer has no control over the time the ORM will synchronize the in-memory objects with the database, which can often produce unexpected results. If you agree with me and want to change the flushMode used by SMPC Simply copy the code below:</p>
<pre><code><span class="annotation">@Produces</span>
<span class="annotation">@ApplicationScoped</span>
<span class="keyword">protected</span> <span class="function">FlushModeManager <span class="title">createDefaultFlushModeManager</span><span class="params">()</span> </span>{
    FlushModeManagerImpl flushModeManager = <span class="keyword">new</span> FlushModeManagerImpl();
    flushModeManager.setFlushModeType(FlushModeType.COMMIT);
    <span class="keyword">return</span> flushModeManager;
}
</code></pre><p>This method will produce a CDI bean of type FlushModeManager to be used by SMPC to set the flushMode in the EntityManager. The new bean will override the default bean created by Seam Persistence, and with it, you can set the flushMode in three ways: AUTO, MANUAL and COMMIT.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>One of the great advantages of using Seam Persistence is the Seam Managed Persistence Context (SMPC) which allows better management of the EntityManager in your application. With the SMPC is possible to place the EntityManager in a CDI scope which can greatly ease the life of developers helping us to sharply minimize errors as the dreaded LazyInitializationException.</p>]]>
    
    </summary>
    
      <category term="Seam Managed Persistence Context" scheme="http://marlonpatrick.info/tags/Seam-Managed-Persistence-Context/"/>
    
      <category term="Seam Persistence" scheme="http://marlonpatrick.info/tags/Seam-Persistence/"/>
    
      <category term="JBoss Seam" scheme="http://marlonpatrick.info/categories/JBoss-Seam/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Seam Faces: TransactionPhaseListener and the error JBAS010152]]></title>
    <link href="http://marlonpatrick.info/en/2012/10/31/seam-faces-transactionphaselistener-and-the-error-jbas010152/"/>
    <id>http://marlonpatrick.info/en/2012/10/31/seam-faces-transactionphaselistener-and-the-error-jbas010152/</id>
    <published>2012-10-31T19:40:00.000Z</published>
    <updated>2015-08-03T03:28:24.015Z</updated>
    <content type="html"><![CDATA[<p>If you are using Seam Faces you may have already come across the following message in the log of your application:<br><strong>JBAS010152: APPLICATION ERROR: transaction still active in request with status 0</strong></p>
<a id="more"></a>
<p>This message is caused by the malfunction of the transaction control of your system, more specifically, by the malfunction of TransactionPhaseListener class, contained in the Seam Faces jar. Basically, TransactionPhaseListener implements a common JSF PhaseListener at the beginning of every request opens a new transaction and the end of the request performs the transaction commit or rollback.</p>
<p>The problem is that the TransactionPhaseListener is enabled by default since your project has the Seam Faces, Seam Seam Transaction Persistence and thus the mere fact of placing these libs in your project already adds the behavior described above in the system, and most cases, has conflicting with the transaction control chosen to be used in the application. In my case, the TransactionPhaseListener behavior did not meet and worse, interfered. The solution I found was to disable this behavior through the following setting in beans.xml file:</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://java.sun.com/xml/ns/javaee"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="attribute">xmlns:s</span>=<span class="value">"urn:java:ee"</span> <span class="attribute">xmlns:t</span>=<span class="value">"urn:java:org.jboss.seam.transaction"</span>
       <span class="attribute">xmlns:ft</span>=<span class="value">"urn:java:org.jboss.seam.faces.transaction"</span>
       <span class="attribute">xmlns:sc</span>=<span class="value">"urn:java:org.jboss.solder.core"</span>
       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://java.sun.com/xml/ns/javaee http://docs.jboss.org/cdi/beans_1_0.xsd"</span>&gt;</span>

    <span class="comment">&lt;!-- Others Configurations --&gt;</span>

    <span class="tag">&lt;<span class="title">sc:Veto</span>&gt;</span>
        <span class="comment">&lt;!-- Defines @Veto as a Qualifier --&gt;</span>
    <span class="tag">&lt;<span class="title">s:Qualifier</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">sc:Veto</span>&gt;</span>

    <span class="tag">&lt;<span class="title">ft:TransactionPhaseListener</span>&gt;</span>
         <span class="comment">&lt;!--  Preventing class TransactionPhaseListener from being installed as CDI bean.
             This class is responsible by message: JBAS010152: APPLICATION ERROR: transaction still active in request with status 0. 
            --&gt;</span> 
    <span class="tag">&lt;<span class="title">s:replaces</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">sc:Veto</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">ft:TransactionPhaseListener</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</code></pre><p>With this setting in beans.xml the TransactionPhaseListener class will be ignored by the CDI and so is disabled, thus eliminating the problem in the transaction control and that annoying message (JBAS010152). In fact, when I got rid of this problem appeared others in my project because he was hiding some defects in my transaction control, then I recommend trying to validate its strategy after disable TransactionPhaseListener and make sure it is in working order.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you are using Seam Faces you may have already come across the following message in the log of your application:<br><strong>JBAS010152: APPLICATION ERROR: transaction still active in request with status 0</strong></p>]]>
    
    </summary>
    
      <category term="CDI" scheme="http://marlonpatrick.info/tags/CDI/"/>
    
      <category term="JBoss Seam" scheme="http://marlonpatrick.info/tags/JBoss-Seam/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/tags/JSF/"/>
    
      <category term="Seam Faces" scheme="http://marlonpatrick.info/tags/Seam-Faces/"/>
    
      <category term="Seam Solder" scheme="http://marlonpatrick.info/tags/Seam-Solder/"/>
    
      <category term="JBoss Seam" scheme="http://marlonpatrick.info/categories/JBoss-Seam/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Seam Faces: TransactionPhaseListener e o erro JBAS010152]]></title>
    <link href="http://marlonpatrick.info/pt-br/2012/10/31/seam-faces-transactionphaselistener-e-o-erro-jbas010152/"/>
    <id>http://marlonpatrick.info/pt-br/2012/10/31/seam-faces-transactionphaselistener-e-o-erro-jbas010152/</id>
    <published>2012-10-31T19:40:00.000Z</published>
    <updated>2015-08-03T03:27:22.445Z</updated>
    <content type="html"><![CDATA[<p>Se você está usando Seam Faces pode já ter se deparado com a seguinte mensagem no log de sua aplicação:<br><strong>JBAS010152: APPLICATION ERROR: transaction still active in request with status 0</strong></p>
<a id="more"></a>
<p>Essa mensagem é provocada pelo mal funcionamento do controle de transação do seu sistema, mais especificamente, pelo mal funcionamento da classe TransactionPhaseListener, contida no jar do Seam Faces. Basicamente, TransactionPhaseListener implementa um PhaseListener comum do JSF que no início de toda requisição abre uma nova transação e no final da requisição realiza o commit ou rollback da transação.</p>
<p>O problema é que o TransactionPhaseListener é habilitado por padrão desde que o seu projeto tenha o Seam Faces, Seam Persistence e Seam Transaction, assim, o simples fato de colocar essas libs no seu projeto já adiciona o comportamento acima descrito no sistema, e na maioria dos casos, acaba entrando em conflito com o controle de transação escolhido para ser usado na aplicação. No meu caso, o comportamento do TransactionPhaseListener não atendia e pior, atrapalhava. A solução que encontrei foi desabilitar esse comportamento através da seguinte configuração no arquivo beans.xml:</p>
<pre><code><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://java.sun.com/xml/ns/javaee"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="attribute">xmlns:s</span>=<span class="value">"urn:java:ee"</span> <span class="attribute">xmlns:t</span>=<span class="value">"urn:java:org.jboss.seam.transaction"</span>
       <span class="attribute">xmlns:ft</span>=<span class="value">"urn:java:org.jboss.seam.faces.transaction"</span>
       <span class="attribute">xmlns:sc</span>=<span class="value">"urn:java:org.jboss.solder.core"</span>
       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://java.sun.com/xml/ns/javaee http://docs.jboss.org/cdi/beans_1_0.xsd"</span>&gt;</span>

    <span class="comment">&lt;!-- Others Configurations --&gt;</span>

    <span class="tag">&lt;<span class="title">sc:Veto</span>&gt;</span>
        <span class="comment">&lt;!-- Defines @Veto as a Qualifier --&gt;</span>
    <span class="tag">&lt;<span class="title">s:Qualifier</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">sc:Veto</span>&gt;</span>

    <span class="tag">&lt;<span class="title">ft:TransactionPhaseListener</span>&gt;</span>
         <span class="comment">&lt;!--  Preventing class TransactionPhaseListener from being installed as CDI bean.
             This class is responsible by message: JBAS010152: APPLICATION ERROR: transaction still active in request with status 0. 
            --&gt;</span> 
    <span class="tag">&lt;<span class="title">s:replaces</span>/&gt;</span>
    <span class="tag">&lt;<span class="title">sc:Veto</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">ft:TransactionPhaseListener</span>&gt;</span>
<span class="tag">&lt;/<span class="title">beans</span>&gt;</span>
</code></pre><p>Com essa configuração no beans.xml a classe TransactionPhaseListener será ignorada pelo CDI e portanto ficará desabilitada, eliminando assim o problema no controle de transação e aquela mensagem chata (JBAS010152). Na verdade, quando consegui me livrar desse problema apareceram outros no meu projeto, pois, ele estava ocultando alguns defeitos no meu controle de transação, então, recomendo tentar validar sua estratégia após desabilitar o TransactionPhaseListener e se certificar que está em perfeito funcionamento.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Se você está usando Seam Faces pode já ter se deparado com a seguinte mensagem no log de sua aplicação:<br><strong>JBAS010152: APPLICATION ERROR: transaction still active in request with status 0</strong></p>]]>
    
    </summary>
    
      <category term="CDI" scheme="http://marlonpatrick.info/tags/CDI/"/>
    
      <category term="JBoss Seam" scheme="http://marlonpatrick.info/tags/JBoss-Seam/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/tags/JSF/"/>
    
      <category term="Seam Faces" scheme="http://marlonpatrick.info/tags/Seam-Faces/"/>
    
      <category term="Seam Solder" scheme="http://marlonpatrick.info/tags/Seam-Solder/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/categories/JSF/"/>
    
      <category term="JBoss Seam" scheme="http://marlonpatrick.info/categories/JSF/JBoss-Seam/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSF Form Validation:Abordagem prática com apoio da API Bean Validation + Seam Faces]]></title>
    <link href="http://marlonpatrick.info/pt-br/2012/07/12/jsf-form-validation-abordagem-pratica-com-apoio-da-api-bean-validation/"/>
    <id>http://marlonpatrick.info/pt-br/2012/07/12/jsf-form-validation-abordagem-pratica-com-apoio-da-api-bean-validation/</id>
    <published>2012-07-12T22:08:00.000Z</published>
    <updated>2015-08-03T02:15:52.632Z</updated>
    <content type="html"><![CDATA[<p>Bem, se você já trabalha com JSF a algum tempo sabe que criar telas com fluxos um pouco mais complexos usando as validações built-in ou até mesmo Bean Validation sabe que isso pode se tornar um tanto complicado. Basicamente o problema é que muitas vezes as validações são acionadas em momentos inoportunos, momentos em que não é necessário a tal validação, mas, isso acontece devido ao tão mencionado ciclo de vida JSF.</p>
<a id="more"></a>
<p>Um exemplo bem simples pra quem usa Primefaces é ao se trabalhar com abas, onde, cada vez que você muda de aba as validações são chamadas pelo JSF, o que em muitos casos é desnecessário. Para saber mais: <a href="http://code.google.com/p/primefaces/issues/detail?id=3423" target="_blank" rel="external">http://code.google.com/p/primefaces/issues/detail?id=3423</a>.</p>
<p>Sim, eu sei que dá pra contornar a maioria desses problemas com o processamento parcial (atributo execute nas tags padrões e process nas tags Primefaces), mas, a verdade é que o código começa a ficar complexo e em alguns casos não tem jeito mesmo e muita gente acaba abdicando dessas validações e colocam as validações no próprio back bean.</p>
<p>Pois bem, esses dias estava fazendo uma dessas telas e acabei me deparando com esses problemas. Deixar o código das páginas complexo não é uma boa opção para esse trabalho e ficar fazendo as validações diretamente nos back beans também não me pareceu a solução mais elegante(apesar de funcionar bem). Nos tempos de Struts existia o conceito de validação de form o que não é natural no JSF, pois, os validadores são determinados componente a componente. Mas aí, encontrei essa funcionalidade no Seam Faces, com a tag <s:validateform>. Com essa tag do Seam Faces podemos definir um JSF Validator para o form e não apenas para um campo específico e esse validador é acionado assim que o form é submetido.</s:validateform></p>
<p>Obs: Qualquer dificuldade de adicionar o Seam Faces no seu projeto leia este outro post <a href="/pt-br/2012/06/14/adicionando-seam-faces-no-seu-projeto-maven/">Adicionando Seam Faces No Seu Projeto Maven</a>.</p>
<p>Com isso, já temos uma maneira de validar o form apenas no momento que o mesmo for submetido, mas, ainda teria de fazer as validações manualmente para cada campo, foi aí que me veio a idéia de usar a api Bean Validation para fazer esse trabalho para mim. A idéia é simples, eu coloco anotações Bean Validation no meu modelo, desabilito as validações do ciclo de vida JSF com a tag <f:validatebean> (JSF 2 e Bean Validation são integradas e as validações são ativadas por padrão) e valido o modelo no meu form validator chamando as validações Bean Validation programaticamente. Dessa forma meu form é validado com a api Bean Validation no momento exato que me interessa, ou seja, no submit.</f:validatebean></p>
<p>O código para isso segue abaixo:</p>
<pre><code><span class="built_in">import</span> java.util.ArrayList;
<span class="built_in">import</span> java.util.LinkedHashSet;
<span class="built_in">import</span> java.util.Set;

<span class="built_in">import</span> javax.faces.application.FacesMessage;
<span class="built_in">import</span> javax.faces.component.UIComponent;
<span class="built_in">import</span> javax.faces.component.UIInput;
<span class="built_in">import</span> javax.faces.context.FacesContext;
<span class="built_in">import</span> javax.faces.validator.BeanValidator;
<span class="built_in">import</span> javax.faces.validator.FacesValidator;
<span class="built_in">import</span> javax.faces.validator.Validator;
<span class="built_in">import</span> javax.faces.validator.ValidatorException;

<span class="built_in">import</span> org.primefaces.component.tabview.Tab;

@FacesValidator<span class="params">(<span class="string">"formBeanValidator"</span>)</span>
public class FormBeanValidatorTeste implements Validator {


    protected Set&lt;FacesMessage&gt; allMessages;

    @Override
    public void validate<span class="params">(FacesContext context, UIComponent component, Object object)</span> throws ValidatorException {

        ArrayList&lt;FacesMessage&gt; messages = new ArrayList&lt;FacesMessage&gt;<span class="params">(validateInputs<span class="params">(context, component,
                new BeanValidator<span class="params">()</span>)</span>)</span>;

        <span class="keyword">if</span> <span class="params">(!messages.isEmpty<span class="params">()</span>)</span> {
            <span class="keyword">if</span> <span class="params">(isThrowsValidatorException<span class="params">()</span>)</span> {
                throw new ValidatorException<span class="params">(messages)</span>;
            }

            <span class="comment">//As mensagens de erro ficam disponíveis para uma possível subclasse fazer uso</span>
            this.allMessages = new LinkedHashSet&lt;FacesMessage&gt;<span class="params">(messages)</span>;
        }
    }

    <span class="comment">/**
     * Varre todos os campos do form e caso seja um 
     * UIInput chama o BeanValidator padrão do JSF. 
     *
     *@author marlonpatrick10
     */</span>
    private Set&lt;FacesMessage&gt; validateInputs<span class="params">(FacesContext context, UIComponent rootComponent,
            BeanValidator beanValidator)</span> {

        Set&lt;FacesMessage&gt; messages = new LinkedHashSet&lt;FacesMessage&gt;<span class="params">()</span>;

        <span class="keyword">for</span> <span class="params">(UIComponent children : rootComponent.getChildren<span class="params">()</span>)</span> {
            <span class="keyword">if</span> <span class="params">(children == rootComponent)</span> {
                continue;
            }

            <span class="keyword">if</span> <span class="params">(!children.isRendered<span class="params">()</span>)</span> {
                continue;
            }

            <span class="keyword">if</span> <span class="params">(Tab.class.isAssignableFrom<span class="params">(children.getClass<span class="params">()</span>)</span>)</span> {<span class="comment">//Primefaces</span>
                Tab tab = <span class="params">(Tab)</span><span class="built_in">children</span>;
                <span class="keyword">if</span> <span class="params">(tab.isDisabled<span class="params">()</span>)</span> {
                    continue;
                }
            }

            <span class="keyword">if</span> <span class="params">(UIInput.class.isAssignableFrom<span class="params">(children.getClass<span class="params">()</span>)</span>)</span> {
                <span class="keyword">if</span> <span class="params">(isValidatable<span class="params">(context, <span class="params">(UIInput)</span>children)</span>)</span> {
                    validate<span class="params">(context, beanValidator, <span class="params">(UIInput)</span>children, messages)</span>;
                }
            }

            messages.addAll<span class="params">(validateInputs<span class="params">(context, children, beanValidator)</span>)</span>;
        }

        return messages;
    }

    <span class="comment">/**
     * Chama o BeanValidator padrão do JSF
     * para um determinado UIInput. 
     *
     *@author marlonpatrick10
     */</span>
    protected void validate<span class="params">(FacesContext context, BeanValidator beanValidator, UIInput component,
            Set&lt;FacesMessage&gt; messages)</span> {
        try {
            beanValidator.validate<span class="params">(context, component, component.getValue<span class="params">()</span>)</span>;
        } catch <span class="params">(ValidatorException exception)</span> {
            <span class="keyword">if</span> <span class="params">(exception.getFacesMessages<span class="params">()</span> == null)</span> {
                messages.add<span class="params">(exception.getFacesMessage<span class="params">()</span>)</span>;
            } <span class="keyword">else</span> {
                messages.addAll<span class="params">(exception.getFacesMessages<span class="params">()</span>)</span>;
            }
        }
    }

    <span class="comment">/**
     * O comportamento padrão é validar todos os UIInput,
     * mas, pode ser que não seja necessário validar 
     * um determinado componente numa tela.
     * 
     * Assim, esse validator pode ser extendido e o 
     * método usado para identificar se o componente 
     * deve ser ou não validado.
     *
     *@author marlonpatrick10
     */</span>
    protected Boolean isValidatable<span class="params">(FacesContext context, UIInput input)</span> {
        return <span class="literal">true</span>;
    }

    <span class="comment">/**
     * O comportamento padrão é validar todos os UIInput,
     * e lançar uma ValidatorException caso haja erros.
     * Esse validator pode ser extendido e o 
     * método sobrescrito para não lançar a exceção,
     * assim o novo validator pode fazer validações extras.
     * 
     * As mensagens de erro do Bean Validation
     * ficam disponíveis no atributo this.allMessages.
     *
     *@author marlonpatrick10
     */</span>
    protected Boolean isThrowsValidatorException<span class="params">()</span> {
        return <span class="literal">true</span>;
    }
}
</code></pre><p>O FormBeanValidator pode servir para a maioria das telas, mas, ainda sim há casos que queremos especializar mais as validações. Abaixo segue um exemplo:</p>
<pre><code><span class="keyword">import</span> java.util.<span class="type">Set</span>;

<span class="keyword">import</span> javax.faces.application.<span class="type">FacesMessage</span>;
<span class="keyword">import</span> javax.faces.component.<span class="type">UIInput</span>;
<span class="keyword">import</span> javax.faces.context.<span class="type">FacesContext</span>;
<span class="keyword">import</span> javax.faces.validator.<span class="type">BeanValidator</span>;
<span class="keyword">import</span> javax.faces.validator.<span class="type">FacesValidator</span>;
<span class="keyword">import</span> javax.inject.<span class="type">Inject</span>;

<span class="keyword">import</span> <span class="type">GenericUtils</span>;
<span class="keyword">import</span> <span class="type">FormBeanValidator</span>;

<span class="annotation">@FacesValidator</span>(<span class="string">"userFormBeanValidator"</span>)
public <span class="class"><span class="keyword">class</span> <span class="title">UserFormBeanValidator</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">FormBeanValidator</span> {</span>

    <span class="annotation">@Inject</span>
    <span class="type">UserView</span> userView;<span class="comment">//back bean</span>

    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> <span class="type">Boolean</span> isValidatable(<span class="type">FacesContext</span> context, <span class="type">UIInput</span> input) {
        <span class="comment">//No momento do submit da tela de cadastro de usuário </span>
        <span class="comment">//não é preciso validar os campos abaixo</span>

        <span class="keyword">if</span> (input.getClientId().endsWith(<span class="string">"fieldX"</span>)) {
            <span class="keyword">return</span> <span class="literal">false</span>;
        }

        <span class="keyword">if</span> (input.getClientId().endsWith(<span class="string">"fieldY"</span>)) {
            <span class="keyword">return</span> <span class="literal">false</span>;
        }

        <span class="keyword">return</span> <span class="literal">true</span>;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> void validate(<span class="type">FacesContext</span> context, <span class="type">BeanValidator</span> beanValidator, <span class="type">UIInput</span> component,
            <span class="type">Set</span>&lt;<span class="type">FacesMessage</span>&gt; messages) {

        <span class="comment">//email2 não pode ser anotado com @NotNull, pois, sua obrigatoriedade é condicional</span>
        <span class="keyword">if</span> (<span class="keyword">this</span>.userView.isAdmin()) {
            <span class="keyword">if</span> (component.getClientId().endsWith(<span class="string">"email2"</span>)) {
                <span class="keyword">if</span> (<span class="type">GenericUtils</span>.isBlankOrNull((<span class="type">String</span>)component.getValue())) {
                    <span class="keyword">this</span>.allMessages.add(<span class="keyword">new</span> <span class="type">FacesMessage</span>(<span class="type">FacesMessage</span>.<span class="type">SEVERITY_ERROR</span>,
                            <span class="string">"Usuário admin deve informar 2 emails."</span>,<span class="literal">null</span>));
                }
            }
        }

        <span class="comment">//chama Bean Validation mesmo para email2, pois, </span>
        <span class="comment">//User.email2 está anotado com @Email, então, </span>
        <span class="comment">//ainda precisa ser validado</span>
        <span class="keyword">super</span>.validate(context, beanValidator, component, messages);
    }
}
</code></pre><p>Na página(xhtml) deve ficar algo como segue abaixo:</p>
<pre><code><span class="tag">&lt;<span class="title">html</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/1999/xhtml"</span>
    <span class="attribute">xmlns:h</span>=<span class="value">"http://java.sun.com/jsf/html"</span>
    <span class="attribute">xmlns:f</span>=<span class="value">"http://java.sun.com/jsf/core"</span>
    <span class="attribute">xmlns:s</span>=<span class="value">"http://jboss.org/seam/faces"</span>&gt;</span>

    <span class="tag">&lt;<span class="title">h:form</span> <span class="attribute">id</span>=<span class="value">"formInsertUser"</span> <span class="attribute">prependId</span>=<span class="value">"false"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">f:validateBean</span> <span class="attribute">disabled</span>=<span class="value">"true"</span>&gt;</span>
            <span class="comment">&lt;!-- Os campos anotados com Bean Validation devem ficar aqui --&gt;</span>
        <span class="tag">&lt;/<span class="title">f:validateBean</span>&gt;</span>

        <span class="tag">&lt;<span class="title">h:commandLink</span> <span class="attribute">value</span>=<span class="value">"Salvar"</span> <span class="attribute">action</span>=<span class="value">"#{userView.insert}"</span> /&gt;</span>

        <span class="comment">&lt;!-- O validator será chamado no click do commandLink --&gt;</span>
        <span class="tag">&lt;<span class="title">s:validateForm</span> <span class="attribute">validatorId</span>=<span class="value">"userFormBeanValidator"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">h:form</span>&gt;</span>

<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>Essa validação de form aliada ao Bean Validation vai me ajudar muito a construir páginas mais complexas com JSF sem ter tanta dor de cabeça com validações fora de hora, espero que ajude você também.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Bem, se você já trabalha com JSF a algum tempo sabe que criar telas com fluxos um pouco mais complexos usando as validações built-in ou até mesmo Bean Validation sabe que isso pode se tornar um tanto complicado. Basicamente o problema é que muitas vezes as validações são acionadas em momentos inoportunos, momentos em que não é necessário a tal validação, mas, isso acontece devido ao tão mencionado ciclo de vida JSF.</p>]]>
    
    </summary>
    
      <category term="Bean Validation" scheme="http://marlonpatrick.info/tags/Bean-Validation/"/>
    
      <category term="JBoss Seam" scheme="http://marlonpatrick.info/tags/JBoss-Seam/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/tags/JSF/"/>
    
      <category term="JSF Form Validation" scheme="http://marlonpatrick.info/tags/JSF-Form-Validation/"/>
    
      <category term="JSF Validation" scheme="http://marlonpatrick.info/tags/JSF-Validation/"/>
    
      <category term="JSR 303" scheme="http://marlonpatrick.info/tags/JSR-303/"/>
    
      <category term="Seam Faces" scheme="http://marlonpatrick.info/tags/Seam-Faces/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/categories/JSF/"/>
    
      <category term="JBoss Seam" scheme="http://marlonpatrick.info/categories/JSF/JBoss-Seam/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSF Form Validation: Practical approach with support from the Bean Validation API + Seam Faces]]></title>
    <link href="http://marlonpatrick.info/en/2012/07/12/jsf-form-validation-pratical-approach-with-support-from-bean-validation-api/"/>
    <id>http://marlonpatrick.info/en/2012/07/12/jsf-form-validation-pratical-approach-with-support-from-bean-validation-api/</id>
    <published>2012-07-12T22:08:00.000Z</published>
    <updated>2015-08-03T02:15:46.081Z</updated>
    <content type="html"><![CDATA[<p>Well, if you already work with JSF some time knows that creating screens with a little more complex flows using the built-in validations or even Bean Validation know that this can become somewhat complicated. Basically the problem is that often the validations are triggered at inopportune moments, times when it is not necessary to such validation, but this is due to overstated JSF lifecycle.</p>
<a id="more"></a>
<p>A simple example for those who use Primefaces is when working with tabs, where each time you change tab validations are called by JSF, which in many cases is unnecessary. To learn more: <a href="http://code.google.com/p/primefaces/issues/detail?id=3423" target="_blank" rel="external">http://code.google.com/p/primefaces/issues/detail?id=3423</a>.</p>
<p>Yes, I know it gives to circumvent most of these problems with partial rendering (attribute execute in the standards tags and process in the Primefaces tags), but the truth is that the code starts to get complex and in some cases has not hopeless and many people end up giving up these validations and put validations in the own back bean.</p>
<p>Well, those days doing one of these screens and ended up running into these problems. Leave the code of complex pages is not a good fit for the job and keep doing validations directly in back beans also did not seem the most elegant solution (although work well). In Struts times there was the concept of form validation which is not natural in JSF therefore validators are determined component to component. But then I found this functionality in Seam Faces, with the tag <s:validateform>. With this Seam Faces tag can define a JSF Validator for form and not just for a particular field and this validator is triggered as soon as the form is submitted.</s:validateform></p>
<p>Note: Any difficulty adding Seam Faces in your project read this other post [Adding Seam Faces In Your Maven Project] (/en/2012/06/14/adding-seam-faces-in-your-maven-project/).</p>
<p>Thus, we already have a way to validate the form only at the time that it is submitted, but would still have to do the validations manually for each field, that’s when I had the idea to use the api Bean Validation to do this work for me. The idea is simple, I put Bean Validation annotations in my model, I disable the validation of the JSF life cycle with the <f:validatebean> (JSF 2 and Bean Validation are integrated and validations are enabled by default) and the valid model in my form validator calling validations Bean Validation programmatically. That way my form is validated with the api Bean Validation at the exact moment that interests me, that is, the submit.</f:validatebean></p>
<p>The code for this is as follows:</p>
<pre><code><span class="built_in">import</span> java.util.ArrayList;
<span class="built_in">import</span> java.util.LinkedHashSet;
<span class="built_in">import</span> java.util.Set;

<span class="built_in">import</span> javax.faces.application.FacesMessage;
<span class="built_in">import</span> javax.faces.component.UIComponent;
<span class="built_in">import</span> javax.faces.component.UIInput;
<span class="built_in">import</span> javax.faces.context.FacesContext;
<span class="built_in">import</span> javax.faces.validator.BeanValidator;
<span class="built_in">import</span> javax.faces.validator.FacesValidator;
<span class="built_in">import</span> javax.faces.validator.Validator;
<span class="built_in">import</span> javax.faces.validator.ValidatorException;

<span class="built_in">import</span> org.primefaces.component.tabview.Tab;

@FacesValidator<span class="params">(<span class="string">"formBeanValidator"</span>)</span>
public class FormBeanValidatorTeste implements Validator {


    protected Set&lt;FacesMessage&gt; allMessages;

    @Override
    public void validate<span class="params">(FacesContext context, UIComponent component, Object object)</span> throws ValidatorException {

        ArrayList&lt;FacesMessage&gt; messages = new ArrayList&lt;FacesMessage&gt;<span class="params">(validateInputs<span class="params">(context, component,
                new BeanValidator<span class="params">()</span>)</span>)</span>;

        <span class="keyword">if</span> <span class="params">(!messages.isEmpty<span class="params">()</span>)</span> {
            <span class="keyword">if</span> <span class="params">(isThrowsValidatorException<span class="params">()</span>)</span> {
                throw new ValidatorException<span class="params">(messages)</span>;
            }

            <span class="comment">//The error messages are available for a possible subclass to use</span>
            this.allMessages = new LinkedHashSet&lt;FacesMessage&gt;<span class="params">(messages)</span>;
        }
    }

    <span class="comment">/**
     * Scans all form fields and if you are a
     * UIInput calls the standard BeanValidator JSF. 
     *
     *@author marlonpatrick10
     */</span>
    private Set&lt;FacesMessage&gt; validateInputs<span class="params">(FacesContext context, UIComponent rootComponent,
            BeanValidator beanValidator)</span> {

        Set&lt;FacesMessage&gt; messages = new LinkedHashSet&lt;FacesMessage&gt;<span class="params">()</span>;

        <span class="keyword">for</span> <span class="params">(UIComponent children : rootComponent.getChildren<span class="params">()</span>)</span> {
            <span class="keyword">if</span> <span class="params">(children == rootComponent)</span> {
                continue;
            }

            <span class="keyword">if</span> <span class="params">(!children.isRendered<span class="params">()</span>)</span> {
                continue;
            }

            <span class="keyword">if</span> <span class="params">(Tab.class.isAssignableFrom<span class="params">(children.getClass<span class="params">()</span>)</span>)</span> {<span class="comment">//Primefaces</span>
                Tab tab = <span class="params">(Tab)</span><span class="built_in">children</span>;
                <span class="keyword">if</span> <span class="params">(tab.isDisabled<span class="params">()</span>)</span> {
                    continue;
                }
            }

            <span class="keyword">if</span> <span class="params">(UIInput.class.isAssignableFrom<span class="params">(children.getClass<span class="params">()</span>)</span>)</span> {
                <span class="keyword">if</span> <span class="params">(isValidatable<span class="params">(context, <span class="params">(UIInput)</span>children)</span>)</span> {
                    validate<span class="params">(context, beanValidator, <span class="params">(UIInput)</span>children, messages)</span>;
                }
            }

            messages.addAll<span class="params">(validateInputs<span class="params">(context, children, beanValidator)</span>)</span>;
        }

        return messages;
    }

    <span class="comment">/**
     * Call the standard JSF BeanValidator
     * For a given UIInput.
     *@author marlonpatrick10
     */</span>
    protected void validate<span class="params">(FacesContext context, BeanValidator beanValidator, UIInput component,
            Set&lt;FacesMessage&gt; messages)</span> {
        try {
            beanValidator.validate<span class="params">(context, component, component.getValue<span class="params">()</span>)</span>;
        } catch <span class="params">(ValidatorException exception)</span> {
            <span class="keyword">if</span> <span class="params">(exception.getFacesMessages<span class="params">()</span> == null)</span> {
                messages.add<span class="params">(exception.getFacesMessage<span class="params">()</span>)</span>;
            } <span class="keyword">else</span> {
                messages.addAll<span class="params">(exception.getFacesMessages<span class="params">()</span>)</span>;
            }
        }
    }

    <span class="comment">/**
     * The default behavior is to validate all UIInput,
     * But it may be not necessary to validate
     * A particular component on a screen.
     *
     * So this validator can be extended and the
     * Method used to identify whether the component
     * Must be validated or not.
     *
     *@author marlonpatrick10
     */</span>
    protected Boolean isValidatable<span class="params">(FacesContext context, UIInput input)</span> {
        return <span class="literal">true</span>;
    }

    <span class="comment">/**
     * The default behavior is to validate all UIInput,
     * And throw a ValidatorException if there are errors.
     * This validator can be extended and the
     * Method overridden to not throw the exception,
     * So the new validator can make extra validations.
     *
     * Error messages from the Bean Validation
     * Are available in this.allMessages attribute.
     *
     *@author marlonpatrick10
     */</span>
    protected Boolean isThrowsValidatorException<span class="params">()</span> {
        return <span class="literal">true</span>;
    }
}
</code></pre><p>The FormBeanValidator can cater for most screens, but even so there are cases that want to specialize more validations. Here is an example:</p>
<pre><code><span class="keyword">import</span> java.util.<span class="type">Set</span>;

<span class="keyword">import</span> javax.faces.application.<span class="type">FacesMessage</span>;
<span class="keyword">import</span> javax.faces.component.<span class="type">UIInput</span>;
<span class="keyword">import</span> javax.faces.context.<span class="type">FacesContext</span>;
<span class="keyword">import</span> javax.faces.validator.<span class="type">BeanValidator</span>;
<span class="keyword">import</span> javax.faces.validator.<span class="type">FacesValidator</span>;
<span class="keyword">import</span> javax.inject.<span class="type">Inject</span>;

<span class="keyword">import</span> <span class="type">GenericUtils</span>;
<span class="keyword">import</span> <span class="type">FormBeanValidator</span>;

<span class="annotation">@FacesValidator</span>(<span class="string">"userFormBeanValidator"</span>)
public <span class="class"><span class="keyword">class</span> <span class="title">UserFormBeanValidator</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">FormBeanValidator</span> {</span>

    <span class="annotation">@Inject</span>
    <span class="type">UserView</span> userView;<span class="comment">//back bean</span>

    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> <span class="type">Boolean</span> isValidatable(<span class="type">FacesContext</span> context, <span class="type">UIInput</span> input) {
        <span class="comment">// Upon submit the user registration screen</span>
        <span class="comment">// No need to validate the fields below        </span>

        <span class="keyword">if</span> (input.getClientId().endsWith(<span class="string">"fieldX"</span>)) {
            <span class="keyword">return</span> <span class="literal">false</span>;
        }

        <span class="keyword">if</span> (input.getClientId().endsWith(<span class="string">"fieldY"</span>)) {
            <span class="keyword">return</span> <span class="literal">false</span>;
        }

        <span class="keyword">return</span> <span class="literal">true</span>;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">protected</span> void validate(<span class="type">FacesContext</span> context, <span class="type">BeanValidator</span> beanValidator, <span class="type">UIInput</span> component,
            <span class="type">Set</span>&lt;<span class="type">FacesMessage</span>&gt; messages) {

        <span class="comment">//email2 can not be annotated with @NotNull therefore your obligation is conditional</span>

        <span class="keyword">if</span> (<span class="keyword">this</span>.userView.isAdmin()) {
            <span class="keyword">if</span> (component.getClientId().endsWith(<span class="string">"email2"</span>)) {
                <span class="keyword">if</span> (<span class="type">GenericUtils</span>.isBlankOrNull((<span class="type">String</span>)component.getValue())) {
                    <span class="keyword">this</span>.allMessages.add(<span class="keyword">new</span> <span class="type">FacesMessage</span>(<span class="type">FacesMessage</span>.<span class="type">SEVERITY_ERROR</span>,
                            <span class="string">"Admin user should tell two emails."</span>,<span class="literal">null</span>));
                }
            }
        }

        <span class="comment">//Call Bean Validation even email2 therefore</span>
        <span class="comment">//User.email2 Is annotated with @Email then</span>
        <span class="comment">//Still needs to be validated</span>
        <span class="keyword">super</span>.validate(context, beanValidator, component, messages);
    }
}
</code></pre><p>On page (xhtml) should be something like follows:</p>
<pre><code><span class="tag">&lt;<span class="title">html</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/1999/xhtml"</span>
    <span class="attribute">xmlns:h</span>=<span class="value">"http://java.sun.com/jsf/html"</span>
    <span class="attribute">xmlns:f</span>=<span class="value">"http://java.sun.com/jsf/core"</span>
    <span class="attribute">xmlns:s</span>=<span class="value">"http://jboss.org/seam/faces"</span>&gt;</span>

    <span class="tag">&lt;<span class="title">h:form</span> <span class="attribute">id</span>=<span class="value">"formInsertUser"</span> <span class="attribute">prependId</span>=<span class="value">"false"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">f:validateBean</span> <span class="attribute">disabled</span>=<span class="value">"true"</span>&gt;</span>
            <span class="comment">&lt;!-- Fields annotated with Bean Validation should be here --&gt;</span>
        <span class="tag">&lt;/<span class="title">f:validateBean</span>&gt;</span>

        <span class="tag">&lt;<span class="title">h:commandLink</span> <span class="attribute">value</span>=<span class="value">"Save"</span> <span class="attribute">action</span>=<span class="value">"#{userView.insert}"</span> /&gt;</span>

        <span class="comment">&lt;!-- The validator will be called at the click commandLink --&gt;</span>
        <span class="tag">&lt;<span class="title">s:validateForm</span> <span class="attribute">validatorId</span>=<span class="value">"userFormBeanValidator"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">h:form</span>&gt;</span>

<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>This form of validation together with the Bean Validation will help me a lot to build more complex pages with JSF without much headache with validations out of turn, I hope it helps you too.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Well, if you already work with JSF some time knows that creating screens with a little more complex flows using the built-in validations or even Bean Validation know that this can become somewhat complicated. Basically the problem is that often the validations are triggered at inopportune moments, times when it is not necessary to such validation, but this is due to overstated JSF lifecycle.</p>]]>
    
    </summary>
    
      <category term="JSF Validation" scheme="http://marlonpatrick.info/tags/JSF-Validation/"/>
    
      <category term="JSR 303" scheme="http://marlonpatrick.info/tags/JSR-303/"/>
    
      <category term="Seam Faces" scheme="http://marlonpatrick.info/tags/Seam-Faces/"/>
    
      <category term="JSF" scheme="http://marlonpatrick.info/categories/JSF/"/>
    
      <category term="JBoss Seam" scheme="http://marlonpatrick.info/categories/JSF/JBoss-Seam/"/>
    
      <category term="Bean Validation" scheme="http://marlonpatrick.info/categories/JSF/JBoss-Seam/Bean-Validation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JAXB + Hibernate + Javassist]]></title>
    <link href="http://marlonpatrick.info/en/2012/07/12/en-jaxb-plus-hibernate-plus-javassist/"/>
    <id>http://marlonpatrick.info/en/2012/07/12/en-jaxb-plus-hibernate-plus-javassist/</id>
    <published>2012-07-12T16:08:00.000Z</published>
    <updated>2015-08-03T03:55:58.703Z</updated>
    <content type="html"><![CDATA[<p>If you are trying to convert a java object to XML using JAXB may have some problems if the object is being managed by Hibernate. In some cases Hibernate rewrites classes to make some improvements and add extra features, such as objects with Lazy mappings. In such cases Hibernate rewrites the class of the object so that it can do lazy loading of data.</p>
<a id="more"></a>
<p>So far so good, we do not have knowledge as we work with the real object interface, however, when using an api as JAXB using reflection for the fields and methods of the object, it may cause some problems. In my case, the error was something like this:</p>
<pre><code>com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: <span class="number">2</span> counts <span class="keyword">of</span> IllegalAnnotationExceptions
javassist.util.proxy.MethodHandler <span class="keyword">is</span> an interface, <span class="keyword">and</span> JAXB can't handle interfaces.
    this problem <span class="keyword">is</span> related <span class="keyword">to</span> <span class="keyword">the</span> following location:
        <span class="keyword">at</span> javassist.util.proxy.MethodHandler
        <span class="keyword">at</span> private javassist.util.proxy.MethodHandler User_$$_javassist_19.handler
        <span class="keyword">at</span> User_$$_javassist_19
javassist.util.proxy.MethodHandler <span class="keyword">does</span> <span class="keyword">not</span> have a no-arg default constructor.
    this problem <span class="keyword">is</span> related <span class="keyword">to</span> <span class="keyword">the</span> following location:
        <span class="keyword">at</span> javassist.util.proxy.MethodHandler
        <span class="keyword">at</span> private javassist.util.proxy.MethodHandler User_$$_javassist_19.handler
        <span class="keyword">at</span> User_$$_javassist_19
</code></pre><p>The case is that Hibernate (using Javassist api) made a proxy in my User class to add Lazy behavior in one of the class properties and added an attribute called handler, which there is no JAXB annotation defining how it should be treated this attribute the marshal time and so the above error occurred.</p>
<p>Well, giving a searched my solution is to unproxy in class wrapped by Hibernate and then marshal do in my real object. For the correct object with Hibernate simply copy the code below:</p>
<pre><code>public Object  getUnproxyModel<span class="params">(Object model)</span> {
    <span class="keyword">if</span> <span class="params">(HibernateProxy.class.isAssignableFrom<span class="params">(model.getClass<span class="params">()</span>)</span>)</span> {
        return <span class="params">(<span class="params">(HibernateProxy)</span>model)</span>.getHibernateLazyInitializer<span class="params">()</span>.getImplementation<span class="params">()</span>;
    }

    return model;
}
</code></pre><p>So, just do this:</p>
<pre><code>marshaller.marshal<span class="params">(getUnproxyModel<span class="params">(user)</span>, outputStream)</span>;
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>If you are trying to convert a java object to XML using JAXB may have some problems if the object is being managed by Hibernate. In some cases Hibernate rewrites classes to make some improvements and add extra features, such as objects with Lazy mappings. In such cases Hibernate rewrites the class of the object so that it can do lazy loading of data.</p>]]>
    
    </summary>
    
      <category term="Hibernate" scheme="http://marlonpatrick.info/tags/Hibernate/"/>
    
      <category term="JAXB" scheme="http://marlonpatrick.info/tags/JAXB/"/>
    
      <category term="Javassist" scheme="http://marlonpatrick.info/tags/Javassist/"/>
    
      <category term="JAXB" scheme="http://marlonpatrick.info/categories/JAXB/"/>
    
      <category term="Hibernate" scheme="http://marlonpatrick.info/categories/JAXB/Hibernate/"/>
    
  </entry>
  
</feed>